{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction 这是JavaScript高级程序设计（第3版）的笔记 每日半小时，阅读多少算多少…… "},"A1-序+前言/序.html":{"url":"A1-序+前言/序.html","title":"序","keywords":"","body":"序 大佬雷最初把JavaScript当作是玩具语言，如认为它只能在页面搞点有意思的交互效果作为装饰。可随着Ajax的出现，大佬雷就懵逼了，这TM还是之前所认为的玩具语言吗？ 我实在想不明白为啥Ajax的出现会让JavaScript变得如此有魅力？ 我想JavaScript本来只是跟页面玩的，可是Ajax的出现，让它多了一个小伙伴儿——服务器，这样一来，它能做的事儿也就变得多样了。 JavaScript很强大吗？如果是，那么它提供了哪些「法宝」来证明它的强大呢？ ★关于这本书 即便你认识了JavaScript好几年了，但是你仍然可以从这本书中学到很多新东西 特点：实实在在、深入浅出 风格：贴切自然 总之： 这本书从介绍表达式和变量声明开始，平滑地过渡到了闭包、面向对象开发等高级主题。与那些把 大量篇幅花在讲解背景知识上的书，以及那些让人感觉好像是要使用 JavaScript 开发导弹制导系统的书 相比，这本书让人感觉细致周到、亲切自然。这是一本写给“普通人”的书，它能让你编写出引以为荣 的代码，构建出令人叫绝的网站。 ★Q&A ①什么叫玩具语言？ 只能玩玩的语言，即相较其它语言只能做些简单活儿的语言……我只能这样认为了。 ps：我在搜索答案的过程中，偶遇的传送门：我的第一个玩具语言 JCScheme 问世了 "},"A1-序+前言/前言.html":{"url":"A1-序+前言/前言.html","title":"前言","keywords":"","body":"前言 ★JavaScript 当今世界最流行（(⊙o⊙)…或许吧！） 一种非常松散的面向对象语言，也是 Web 开发中极受欢迎的一门语言 语法和编程风格与 Java 都很相似，但是这跟Java没有半毛钱关系 一种全新的动态语言（运行时才确定变量类型……） 主要活在Web 浏览器之中（浏览器外的 Javascript 运行环境有哪些？） 目标：致力于增强网站和Web 应用程序的交互性。（Web网站和Web应用程序不是一个意思啊！一个以展示为主，一个以功能为主。我第一次理解这个目标就是为啥不是与用户的交互？而是这两个基佬在交互，所以我觉得应该是二者对用户的交互性。我不知道是不是我理解有问题？还是翻译有问题？为此可以有：「致力于增强网站或者Web 应用程序与用户之间的交互性」） ★本书的逻辑 追根溯源→☞DOM、Ajax ★你会学到什么 掌握如何运用和扩展（难道是ES6/7/8/9之意？）JavaScript这门语言，以此来更好地满足自己的需求 掌握如何实现客户端与服务器的无缝通信 反正就是：教会你在面对各种常见的 Web 开发问题时，如何拿出自己的 JavaScript 解决方案。 ★Q&A ①Web网站和Web应用程序的区别？ 传送门：Web应用程序与网站之间的区别 其中一位网友xxx的总结： 一个web应用程序是一个能够让用户完成某些特定任务的网站。而一个普通的网站的主要目标是给用户提供信息(博客，新闻，指导，等)。 对了，xxx网友还有一个关于电灯泡和发电厂的比喻，让我感觉很有味道，如果没有用电的器具，那么发电厂是否有存在的必要呢？可是没有了电，这些需要电的器具也没有存在的必要了。总之，有些时候，你不能忽视这个正在使用的东西的背后做了哪些事儿…… ②ES5是什么鬼？ 规范？标准？（规范或者标准这TM不是一个意思？）反正有总结： 标准、规范、规程都是标准的一种表现形式，习惯上统称为标准 简单地说规范是对行为、条件的要求和规定，规程是对过程的要求和规定，标准是对结果（或产品）的要求和规定。 自打学编程以来，总喜欢抠字眼，总喜欢针对语义有交集、长得很像的词，如这样的：架构、构架、结构、框架之间有什么区别？ 所以把ES称为标准吧！那么ES5，就是标准的第5个版本咯！详情参考：ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？ ③交互性？ 传送门：交互性 、交互设计 这个家伙的概念没有定性，在不同的领域里其含义是不同的。当然「交互性主要运用于计算机及多媒体领域 」，所以可有其含义为： 交互性即当你点击一个链接时到达一个新的页面 当我点击上面那两个链接的时候，就跳转到另外一个页面了，就像是人机交互的基础方式： 交互过程是一个输入和输出的过程，人通过人机界面向计算机输入指令，计算机经过处理后把输出结果呈现给用户。人和计算机之间的输入和输出的形式是多种多样的，因此交互的形式也是多样化的。 也就是说我输入了一个「点击」，然后计算机或者具体一点就是浏览器输出的是「新开一个窗口打开一个新页面」。由于输入和输出都是多样的，那么诸如用户「回车」「滚动」「鼠标悬停」等输入指令，为此对应的输出也是各有各的花招了…… ps：交互是互通的、双向的、的，浏览器的输出可以当作是用户的输入，作用对象不同，说法也不同了……同时可以想到请求与响应，响应回来的数据，前端开发者把这些数据作为输入，然后按进行下一步逻辑操作，输出到页面，所以可有这样的有bug的回路：用户→☞前端开发者→☞后端开发者→☞前端开发者→☞用户。这让我想起了计算机的三大原则： 计算机是执行输入、运算、输出的机器 程序是指令和数据的集合 计算机的处理方式有时与人们的思维习惯不同 ——来自「计算机是怎样跑起来的」一书 一个不恰当的比喻，就如小时候玩的扔沙袋游戏，用户是扔沙袋的人，前后端开发者则是在圈圈里如何灵活躲闪飞过来的沙袋的人，这用户看起来就像是老大…… 扩展阅读：JavaScript事件有哪些？、事件 "},"A1-序+前言/本书内容.html":{"url":"A1-序+前言/本书内容.html","title":"本书内容","keywords":"","body":"本书内容 ★完全照搬 本书提供了 JavaScript 开发人员必须掌握的内容，全面涵盖了 JavaScript 的各种高级、有用的特性。 本书首先介绍了 JavaScript 的起源及其发展现状，随后讨论了构成 JavaScript 实现的各个组成部分，重点讲解了 ECMAScript 和 DOM 标准。此外，还对不同 Web 浏览器的 JavaScript 实现之间存在的差异，给出了相应的说明。 在此基础上，本书从讲解 JavaScript 的基本概念入手，探讨了 JavaScript 面向对象程序设计和继承的方式，以及如何在 HTML 等标记语言中使用它。在深入剖析了事件和事件处理之后，又解释了各种浏览器检测技术。本书还探讨了 HTML5、Selectors API 和 File API 等一系列新 API。 本书最后一部分专门讨论了高级主题，涉及性能和内存优化、最佳实践以及对 JavaScript 未来的展望。 想要关注的点：面向对象、继承、事件、性能和内存优化…… "},"A1-序+前言/本书结构.html":{"url":"A1-序+前言/本书结构.html","title":"本书结构","keywords":"","body":"本书结构 ★完全照搬 本书共 25 章，各章简介如下。 ◇第1章 第 1 章“JavaScript 简介” ，讲述了 JavaScript 的起源：因何而生，如何发展，现状如何。涉及的 概念主要有 JavaScript 与 ECMAScript 之间的关系、DOM（Document Object Model，文档对象模型）、 BOM（Browser Object Model，浏览器对象模型）。此外，还将讨论 ECMA（European Computer Manufacturer’s Association，欧洲计算机制造商协会）和 W3C（World Wide Web Consortium，万维网联 盟）制定的一些相关标准。 JavaScript的成长路 ◇第2章 第 2 章“在 HTML 中使用 JavaScript” ，介绍了如何在 HTML 中使用 JavaScript 创建动态网页。 这一章不仅展示了在网页中嵌入 JavaScript 的各种方式，还讨论了 JavaScript 内容类型（content-type）及 其与元素的关系。 对JavaScript的初使用 ◇第3章 第 3 章“基本概念” ，讨论了 JavaScript 语言的基本概念，包括语法和流控制语句。这一章也分析 了 JavaScript 与其他基于 C 的语言在语法上的相同和不同之处，还介绍了与内置操作符有关的类型转换 问题。 认识它的基本语法 ◇第4章 第 4 章“变量、作用域和内存问题” ，探讨了 JavaScript 如何处理其松散类型的变量。这一章还讨 论了原始值和引用值之间的差别，以及与变量有关的执行环境的相应内容。最后，通过介绍 JavaScript 的垃圾收集机制，解释了变量在退出作用域时释放其内存的问题。 什么叫松散类型？ ◇第5章 第 5 章“引用类型” ，详尽介绍了 JavaScript 内置的所有引用类型，如 Object 和 Array。这一 章对 ECMA-262 规范中描述的每一种引用类型既做了理论上的阐释，又从浏览器实现的角度给出了 介绍。 Array是对象吗？ ◇第6章 第 6 章“面向对象的程序设计” ，讲述了在 JavaScript 中如何实现面向对象的程序设计。由于 JavaScript 没有类的概念，因此这一章从对象创建和继承的层面上展示了一些流行的技术。此外，这一 章还讲解了函数原型的概念，并对函数原型与整个面向对象方法的关系进行了探讨。 听说ES6有类的概念了 ◇第7章 第 7 章“函数表达式” ，集中介绍了 JavaScript 中最为强大的一个特性——函数表达式。相关的内 容涉及闭包、this 对象的角色、模块模式和创建私有对象成员等。 那些年立即执行函数表达式与闭包不得不说的秘密，还有它们俩的爱情结晶this ◇第8章 第 8 章“BOM” ，介绍 BOM（Browser Object Model，浏览器对象模型），即负责处理与浏览器自 身有关的交互操作的对象集合。这一章全面介绍了每一个 BOM 对象，包括 window、document、location、navigator 和 screen。 超然于页面之外 ◇第9章 第 9 章“客户端检测” ，讨论了检测客户端机器及其支持特性的各种手段，包括特性检测及用户代 理字符串检测的不同技术。这一章还就每种手段的优缺点及适用情形给出了详细说明。 难道是使用「如果……那么……」？ ◇第10章 第 10 章“DOM” ，介绍 DOM（Document Object Model，文档对象模型），即 DOM1 规定的 JavaScript 中的 DOM 对象。这一章也简要介绍了 XML 及其与 DOM 的关系，为深入探讨所有 DOM 规范及其定义 的操作网页的方式奠定了基础。 我JavaScript就是饿死，也不操纵页面……真香 ◇第11章 第 11 章“DOM 扩展” ，介绍了其他 API 以及浏览器本身为 DOM 添加的各种功能。涉及内容包括 Selectors API、Element Traversal API 和 HTML5 扩展。 有这茬子事吗？我怎么不知道？ ◇第12章 第 12 章“DOM2 和 DOM3” ，在前两章的基础上继续探讨了 DOM2 和 DOM3 中新增的 DOM 属 性、方法和对象。这一章还讨论了 IE 与其他浏览器的兼容性问题。 IE的事儿？我不管了 ◇第13章 第 13 章“事件” ，解释了 JavaScript 中事件的本质，对遗留机制的支持，以及 DOM对事件机制的 重新定义。这一章讨论了多种设备，包括 Wii 和 iPhone。 用户与JavaScript沟通的桥梁——事件 ◇第14章 第 14 章“表单脚本” ，讲述如何使用 JavaScript 增强表单的交互性，突破浏览器的局限性。这一 章的讨论主要围绕单个表单元素如文本框、选择框，以及围绕数据验证和操作展开。 我只知道登录注册用到了表单…… ◇第15章 第 15 章“使用 Canvas 绘图” ，讨论了标签以及如何通过它来动态绘图。不仅涵盖 2D 上下文，也将讨论 WebGL（3D）上下文，可以为创建动画和游戏夯实基础。 之前有用Canvas做了一个简单的画板，当然我只是参照视频敲了一遍 ◇第16章 第 16 章“HTML5 脚本编程” ，介绍了 HTML5 规定的 JavaScript API，涉及跨文档传递消息、拖 放 API 和以编程方式控制和元素，以及管理历史状态。 我只用过audio引入了七牛的资源外链 ◇第17章 第 17 章“错误处理与调试” ，讨论浏览器如何处理 JavaScript 代码错误，并展示了一些处理错误 的方式。这一章针对每种浏览器分别讨论了相应的调试工具和技术，还给出了简化调试工作的建议。 log调试大法，你值得拥有 ◇第18章 第 18 章“JavaScript 与 XML” ，展示了 JavaScript 中用于读取和操作 XML（eXtensible Markup Language，可扩展标记语言）的特性。这一章分析了不同浏览器提供的 XML 支持和对象的差异，给出 了编写跨浏览器代码的简易方法。此外，这一章还介绍了用于在客户端转换XML数据的XSLT（eXtensible Stylesheet Language Transformations，可扩展样式表语言转换）技术。 说好的JSON呢？ ◇第19章 第 19 章“E4X” ，讨论了 E4X（ECMAScript for XML，ECMAScript中的 XML扩展）；设计 E4X的 出发点是简化 XML 处理任务。这一章探讨了在处理 XML 时，使用 E4X 与使用 DOM 相比有哪些 优势。 这个和JAVA的DOM4J有关系？ ◇第20章 第 20 章“JSON” ，介绍了作为 XML 替代格式的 JSON，包含浏览器原生支持的 JSON 解析和序 列化，以及使用 JSON 时要注意的安全问题。 我需要了解XML吗？ ◇第21章 第 21 章“Ajax 与 Comet” ，讲解了常用的 Ajax 技术，包括使用 XMLHttpRequest 对象及 CORS （Cross-Origin Resource Sharing，跨来源资源共享）API 实现跨域 Ajax 通信。这一章展示了浏览器在实 现与支持方面存在的差异，同时也给出了一些使用建议。 终于等到你，JavaScript又多了一个小伙伴儿——服务端 ◇第22章 第 22 章“高级技巧” ，深入讲解了一些 JavaScript 中较复杂的模式，包括函数柯里化（currying）、 部分函数应用和动态函数。这一章还讨论了如何创建自定义的事件框架和使用 ECMAScript 5 创建防篡 改对象。 没有了解过……无量天尊 ◇第23章 第 23 章“离线应用与客户端存储” ，讨论了如何检测应用离线以及在客户端机器中存储数据的各 种技术。先从受到最广泛支持的特性 cookie 谈起，继而介绍了新兴的客户端存储技术，如 Web Storage 和 IndexedDB。 了解过小饼干、localStorage、sessionStorage…… ◇第24章 第 24 章“最佳实践” ，探讨了在企业级环境中使用 JavaScript 的各种方式。其中，着眼于提高可 维护性的内容包括编码技巧、格式化和通用编程实践。这一章还介绍了改善代码执行性能及速度优化的 一些技术。最后讨论了部署问题，包括如何创建构建过程。 了解过前端MVC、webpack、parcel…… ◇第25章 第 25 章“新兴的 API” ，介绍了为增强浏览器中的 JavaScript 而创建的新 API。虽然这些 API 还没 有得到完整或全面的支持，但它们已经崭露头角，有些浏览器也已经部分地实现了这些 API。这一章的 内容主要是 Web 计时和文件 API。 我想这些新兴的API一定很强大 "},"A1-序+前言/一些辅助.html":{"url":"A1-序+前言/一些辅助.html","title":"一些辅助","keywords":"","body":"一些辅助 ★如何使用示例 不说需要的操作系统是怎样，以及浏览器的版本是怎样的……至于完整的示例源代码在哪儿呢？ 传送门：Professional JavaScript for Web 目前这本高程3，有第4版了，不过要在18年10月份出版 说实在的，这书还真是贵啊！要45美金，按照此刻的时间「:2018-07-29 09:47 」，就是「45美元=306.4365人民币元 」。也许这是相对而言的，或许在美国人眼中，这很便宜…… 扩展阅读：为什么美国的书价格会比中国高很多？、药价贵是因为研发成本高吗？ ★排版约定 ◇理解内容，把握重点 ✘：这种带警告图标的方框样式，表示与上下文相关的重要的、需要牢记的内容。 ✎：这种带钢笔图标的方框样式，表示与上下文相关的说明、提示、技巧、窍门和背景知识。 ◇正文中的样式说明 新术语及重要的词汇在首次出现时使用 加粗字体 以示强调； 表示键盘命令组合的方式是 Ctrl+A； 正文中的代码使用等宽字体，如 persistence.properties； 代码有两种样式： var obj = new Object(); // 大多数示例代码都没有加粗 var obj = new Object(); // 加粗的代码表示在上下文中特别重要 ★源代码 去哪找？——到 www.wrox.com 中下载 如何快速的找？ 由于很多书的书名看起来类似，所以更好的方式是通过书的 ISBN 来搜索它。本书原版的 ISBN 是 978-1-118-02669-4。 这个技巧刚刚没有使用，为此搜索出4个版本…… ★勘误（Errata）信息 金无足赤，人无完人。错误在所难免…… 欢迎来找茬，以及来看茬：Errata 看这个可以学英文 ★p2p.wrox.com 已经注册好了，都是英文，很难受…… 这本书的论坛，不过很冷清啊 ★译者留言 源码下载的短地址：http://tinyurl.com/projs-3rd-code。我请求了，然后打开的是上文的那个找源码的页面。我看了一下Network，看了一下响应： 301 Moved Permanently ——「301依旧重定向 」 Location: 「跳转页面的链接」 还可以到图灵社区找勘误和code资源，而且还有阅读计划哦，这个阅读计划很重要，不然按照我的阅读速度一年都读不完…… 想要更了解这本书，需要参与阅读计划…… ★致谢 似乎每一本书都有这个，我想「一本书的出版，只靠一个人？是不现实的。书出版的背后会有很多人的帮助」 ★关于技术编辑 技术编辑是做什么的？是检查书本有哪些错误？理顺作者的文字让读者更易接受？ 传送门：作家和编辑的区别是什么？、从技术编辑到 CEO，情怀真能当饭吃 ★Q&A ①金无足赤？ 足赤:足金，纯金。没有纯而又纯的金子。 比喻没有十全十美的事物 。 传送门：金无足赤，人无完人什么意思？ ②刊误和勘误有什么区别？ 【刊误】修改、订正文字上的错误。“刊误”侧重指改错； “勘误”意思为校正印刷品中的差错，侧重指校(jiào)勘。 传送门：刊误和勘误有什么区别 ③301和302？ 官方说法： 301，302 都是HTTP状态的编码，都代表着某个URL发生了转移。 不同之处在于： 301 redirect: 301 代表永久性转移(Permanently Moved)。 302 redirect: 302 代表暂时性转移(Temporarily Moved )。 传送门：HTTP返回码中301与302的区别、http状态码301和302详解及区别——辛酸的探索之路 "}}