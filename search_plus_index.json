{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction 这是JavaScript高级程序设计（第3版）的笔记 每日半小时，阅读多少算多少…… "},"阅读计划.html":{"url":"阅读计划.html","title":"阅读计划","keywords":"","body":"阅读计划 按照这个来：《JavaScript高级程序设计（第3版）》 阅读计划 总之就是这样： ★1~7章 阅读目的：熟习JavaScript的语法，理解那些JavaScript中让人疑惑的概念 推荐阅读时间：8~12天（累计192页，每天至少阅读 16页 能达成目标） ★8~14章 阅读目的： 熟习JavaScript运行的环境，深刻理解DOM，熟习DOM提供给JS的原生API 推荐阅读时间：10~15天（累计251页，每天至少阅读 17页 可达成目标） ★15~16章 阅读目的：学习HTML新增的一些对象提供的API，包括 canvas ，媒体事件等 推荐阅读时间：2~3天（累计49页，每天至少阅读 17页 可达成目标） ★17章 阅读目的：学习在浏览器中进行实际开发时的错误调试技巧 推荐阅读时间：1~2天（累计27页，每天至少阅读 14页 可达成目标） ★18~21章 阅读目的：学习JS对各数据载体的操作方法（如JSON、XML），学会Ajax的使用方法 推荐阅读时间： 4~5天（累计74页，每天至少 15页 可达成目标） ★22~25章 阅读目的：学习JS的一些高级技巧及实践方案 推荐阅读时间：4~6天（累计106页，每天至少 17页 可达成目标） 依据上述计划，本书推荐完成时间为30~45天。 "},"FAQ.html":{"url":"FAQ.html","title":"FAQ","keywords":"","body":"FAQ ★Gitbook使用 ◇插件 search-plus：支持中文全文搜索的插件，默认的只支持搜索英文关键字 ◇内容书写语法 不能出现html标签，为此目前只能用倾斜的语法 **来表示了，而且需要注意是字符之间要连贯起来，毕竟你没有加<>也会被渲染出来 如这样：console.log(1) 这块是看不见的，你 Ctrl+shift+I一下这块区域，直白一点就是「右键→☞检查」 或者是这样： script console.log(2) /script 还有这样： console.log('Hello！world ') 当然后面两个写法在本地浏览是没事的，可是提交到远程仓库就出问题了，可这有区别吗？真是醉了…… ps：又可以了，真是没事找事了，其实说实在的你见过哪个标签是不写 <>是可以运行的？下次出错就看一下markdown语法有没有写错……毕竟是直接用Typora写的笔记 本地markdown是可以显示不加http协议的超链接的，而markdown转html后，就得注意了，得要加上http协议才行，如这样 http://www.baidu.com，而不是 www.baidu.com 突然发觉之前的一些超链接的markdown显示需要用<>括起来，不然相邻的字符就会被收拢为链接的一部分了 总之本地markdown显示的样子和其转换成html的样子，不一定一模一样 ★怎么更好地记笔记 目录创建：根据这本书的源码可知，是以Ch01~Ch25这样的目录名划分的，所以我就按照这样创建目录，划分章节，而目录下面则是一个关于该目录的readme.md、还有各个一级子章节。 之前打算一个章节一个章节来记，可这样做会很让内容很长，看起来很不舒服，所以尽量划分得细一点，而且这样会让你感觉「又一个任务完成了」，为此成就感油然而生，而不是一个很大的任务压在心头。总之就是，把「看一个章节的任务」划分成「看很多个子章节的任务」 把所有参考链接到最后收拢到最后，不然你在每个问题的回答后面追加会很不美观，而且这样是做了两件事的结果，一件是自己归纳的答案，一件是拷贝的链接。你会发现很多博客都是这样做的，有时候你不知道为啥要这样做？可当你遇到不这样做而导致出现这样、那样的问题之后，你才会明然这样做的意义所在。 难道我要不问所以然的拷贝吗？我觉得先拷贝一段时间，然后再去探索不这样做会有怎样的bug……有种「王国维的三重境界说」的味道…… 如何更好地归纳内容？有这么两种可行的方式，扁平式和总分总式，前者言简意赅「形容言语简练而意思完整 」，而后者则是层次分明。推荐书籍：卡内基的《魅力口才与演讲的艺术》 。 参考链接：如何提高自己的归纳总结能力？ "},"A1-序+前言/序.html":{"url":"A1-序+前言/序.html","title":"序","keywords":"","body":"序 大佬雷最初把JavaScript当作是玩具语言，如认为它只能在页面搞点有意思的交互效果作为装饰。可随着Ajax的出现，大佬雷就懵逼了，这TM还是之前所认为的玩具语言吗？ 我实在想不明白为啥Ajax的出现会让JavaScript变得如此有魅力？ 我想JavaScript本来只是跟页面玩的，可是Ajax的出现，让它多了一个小伙伴儿——服务器，这样一来，它能做的事儿也就变得多样了。 JavaScript很强大吗？如果是，那么它提供了哪些「法宝」来证明它的强大呢？ ★关于这本书 即便你认识了JavaScript好几年了，但是你仍然可以从这本书中学到很多新东西 特点：实实在在、深入浅出 风格：贴切自然 总之： 这本书从介绍表达式和变量声明开始，平滑地过渡到了闭包、面向对象开发等高级主题。与那些把 大量篇幅花在讲解背景知识上的书，以及那些让人感觉好像是要使用 JavaScript 开发导弹制导系统的书 相比，这本书让人感觉细致周到、亲切自然。这是一本写给“普通人”的书，它能让你编写出引以为荣 的代码，构建出令人叫绝的网站。 ★Q&A ①什么叫玩具语言？ 只能玩玩的语言，即相较其它语言只能做些简单活儿的语言……我只能这样认为了。 ps：我在搜索答案的过程中，偶遇的传送门：我的第一个玩具语言 JCScheme 问世了 "},"A1-序+前言/前言.html":{"url":"A1-序+前言/前言.html","title":"前言","keywords":"","body":"前言 ★JavaScript 当今世界最流行（(⊙o⊙)…或许吧！） 一种非常松散的面向对象语言，也是 Web 开发中极受欢迎的一门语言 语法和编程风格与 Java 都很相似，但是这跟Java没有半毛钱关系 一种全新的动态语言（运行时才确定变量类型……） 主要活在Web 浏览器之中（浏览器外的 Javascript 运行环境有哪些？） 目标：致力于增强网站和Web 应用程序的交互性。（Web网站和Web应用程序不是一个意思啊！一个以展示为主，一个以功能为主。我第一次理解这个目标就是为啥不是与用户的交互？而是这两个基佬在交互，所以我觉得应该是二者对用户的交互性。我不知道是不是我理解有问题？还是翻译有问题？为此可以有：「致力于增强网站或者Web 应用程序与用户之间的交互性」） ★本书的逻辑 追根溯源→☞DOM、Ajax ★你会学到什么 掌握如何运用和扩展（难道是ES6/7/8/9之意？）JavaScript这门语言，以此来更好地满足自己的需求 掌握如何实现客户端与服务器的无缝通信 反正就是：教会你在面对各种常见的 Web 开发问题时，如何拿出自己的 JavaScript 解决方案。 ★Q&A ①Web网站和Web应用程序的区别？ 传送门：Web应用程序与网站之间的区别 其中一位网友xxx的总结： 一个web应用程序是一个能够让用户完成某些特定任务的网站。而一个普通的网站的主要目标是给用户提供信息(博客，新闻，指导，等)。 对了，xxx网友还有一个关于电灯泡和发电厂的比喻，让我感觉很有味道，如果没有用电的器具，那么发电厂是否有存在的必要呢？可是没有了电，这些需要电的器具也没有存在的必要了。总之，有些时候，你不能忽视这个正在使用的东西的背后做了哪些事儿…… ②ES5是什么鬼？ 规范？标准？（规范或者标准这TM不是一个意思？）反正有总结： 标准、规范、规程都是标准的一种表现形式，习惯上统称为标准 简单地说规范是对行为、条件的要求和规定，规程是对过程的要求和规定，标准是对结果（或产品）的要求和规定。 自打学编程以来，总喜欢抠字眼，总喜欢针对语义有交集、长得很像的词，如这样的：架构、构架、结构、框架之间有什么区别？ 所以把ES称为标准吧！那么ES5，就是标准的第5个版本咯！详情参考：ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？ ③交互性？ 传送门：交互性 、交互设计 这个家伙的概念没有定性，在不同的领域里其含义是不同的。当然「交互性主要运用于计算机及多媒体领域 」，所以可有其含义为： 交互性即当你点击一个链接时到达一个新的页面 当我点击上面那两个链接的时候，就跳转到另外一个页面了，就像是人机交互的基础方式： 交互过程是一个输入和输出的过程，人通过人机界面向计算机输入指令，计算机经过处理后把输出结果呈现给用户。人和计算机之间的输入和输出的形式是多种多样的，因此交互的形式也是多样化的。 也就是说我输入了一个「点击」，然后计算机或者具体一点就是浏览器输出的是「新开一个窗口打开一个新页面」。由于输入和输出都是多样的，那么诸如用户「回车」「滚动」「鼠标悬停」等输入指令，为此对应的输出也是各有各的花招了…… ps：交互是互通的、双向的、的，浏览器的输出可以当作是用户的输入，作用对象不同，说法也不同了……同时可以想到请求与响应，响应回来的数据，前端开发者把这些数据作为输入，然后按进行下一步逻辑操作，输出到页面，所以可有这样的有bug的回路：用户→☞前端开发者→☞后端开发者→☞前端开发者→☞用户。这让我想起了计算机的三大原则： 计算机是执行输入、运算、输出的机器 程序是指令和数据的集合 计算机的处理方式有时与人们的思维习惯不同 ——来自「计算机是怎样跑起来的」一书 一个不恰当的比喻，就如小时候玩的扔沙袋游戏，用户是扔沙袋的人，前后端开发者则是在圈圈里如何灵活躲闪飞过来的沙袋的人，这用户看起来就像是老大…… 扩展阅读：JavaScript事件有哪些？、事件 "},"A1-序+前言/本书内容.html":{"url":"A1-序+前言/本书内容.html","title":"本书内容","keywords":"","body":"本书内容 ★完全照搬 本书提供了 JavaScript 开发人员必须掌握的内容，全面涵盖了 JavaScript 的各种高级、有用的特性。 本书首先介绍了 JavaScript 的起源及其发展现状，随后讨论了构成 JavaScript 实现的各个组成部分，重点讲解了 ECMAScript 和 DOM 标准。此外，还对不同 Web 浏览器的 JavaScript 实现之间存在的差异，给出了相应的说明。 在此基础上，本书从讲解 JavaScript 的基本概念入手，探讨了 JavaScript 面向对象程序设计和继承的方式，以及如何在 HTML 等标记语言中使用它。在深入剖析了事件和事件处理之后，又解释了各种浏览器检测技术。本书还探讨了 HTML5、Selectors API 和 File API 等一系列新 API。 本书最后一部分专门讨论了高级主题，涉及性能和内存优化、最佳实践以及对 JavaScript 未来的展望。 想要关注的点：面向对象、继承、事件、性能和内存优化…… "},"A1-序+前言/本书结构.html":{"url":"A1-序+前言/本书结构.html","title":"本书结构","keywords":"","body":"本书结构 ★完全照搬 本书共 25 章，各章简介如下。 ◇第1章 第 1 章“JavaScript 简介” ，讲述了 JavaScript 的起源：因何而生，如何发展，现状如何。涉及的 概念主要有 JavaScript 与 ECMAScript 之间的关系、DOM（Document Object Model，文档对象模型）、 BOM（Browser Object Model，浏览器对象模型）。此外，还将讨论 ECMA（European Computer Manufacturer’s Association，欧洲计算机制造商协会）和 W3C（World Wide Web Consortium，万维网联 盟）制定的一些相关标准。 JavaScript的成长路 ◇第2章 第 2 章“在 HTML 中使用 JavaScript” ，介绍了如何在 HTML 中使用 JavaScript 创建动态网页。 这一章不仅展示了在网页中嵌入 JavaScript 的各种方式，还讨论了 JavaScript 内容类型（content-type）及 其与script元素的关系。 对JavaScript的初使用 ◇第3章 第 3 章“基本概念” ，讨论了 JavaScript 语言的基本概念，包括语法和流控制语句。这一章也分析 了 JavaScript 与其他基于 C 的语言在语法上的相同和不同之处，还介绍了与内置操作符有关的类型转换 问题。 认识它的基本语法 ◇第4章 第 4 章“变量、作用域和内存问题” ，探讨了 JavaScript 如何处理其松散类型的变量。这一章还讨 论了原始值和引用值之间的差别，以及与变量有关的执行环境的相应内容。最后，通过介绍 JavaScript 的垃圾收集机制，解释了变量在退出作用域时释放其内存的问题。 什么叫松散类型？ ◇第5章 第 5 章“引用类型” ，详尽介绍了 JavaScript 内置的所有引用类型，如 Object 和 Array。这一 章对 ECMA-262 规范中描述的每一种引用类型既做了理论上的阐释，又从浏览器实现的角度给出了 介绍。 Array是对象吗？ ◇第6章 第 6 章“面向对象的程序设计” ，讲述了在 JavaScript 中如何实现面向对象的程序设计。由于 JavaScript 没有类的概念，因此这一章从对象创建和继承的层面上展示了一些流行的技术。此外，这一 章还讲解了函数原型的概念，并对函数原型与整个面向对象方法的关系进行了探讨。 听说ES6有类的概念了 ◇第7章 第 7 章“函数表达式” ，集中介绍了 JavaScript 中最为强大的一个特性——函数表达式。相关的内 容涉及闭包、this 对象的角色、模块模式和创建私有对象成员等。 那些年立即执行函数表达式与闭包不得不说的秘密，还有它们俩的爱情结晶this ◇第8章 第 8 章“BOM” ，介绍 BOM（Browser Object Model，浏览器对象模型），即负责处理与浏览器自 身有关的交互操作的对象集合。这一章全面介绍了每一个 BOM 对象，包括 window、document、location、navigator 和 screen。 超然于页面之外 ◇第9章 第 9 章“客户端检测” ，讨论了检测客户端机器及其支持特性的各种手段，包括特性检测及用户代 理字符串检测的不同技术。这一章还就每种手段的优缺点及适用情形给出了详细说明。 难道是使用「如果……那么……」？ ◇第10章 第 10 章“DOM” ，介绍 DOM（Document Object Model，文档对象模型），即 DOM1 规定的 JavaScript 中的 DOM 对象。这一章也简要介绍了 XML 及其与 DOM 的关系，为深入探讨所有 DOM 规范及其定义 的操作网页的方式奠定了基础。 我JavaScript就是饿死，也不操纵页面……真香 ◇第11章 第 11 章“DOM 扩展” ，介绍了其他 API 以及浏览器本身为 DOM 添加的各种功能。涉及内容包括 Selectors API、Element Traversal API 和 HTML5 扩展。 有这茬子事吗？我怎么不知道？ ◇第12章 第 12 章“DOM2 和 DOM3” ，在前两章的基础上继续探讨了 DOM2 和 DOM3 中新增的 DOM 属 性、方法和对象。这一章还讨论了 IE 与其他浏览器的兼容性问题。 IE的事儿？我不管了 ◇第13章 第 13 章“事件” ，解释了 JavaScript 中事件的本质，对遗留机制的支持，以及 DOM对事件机制的 重新定义。这一章讨论了多种设备，包括 Wii 和 iPhone。 用户与JavaScript沟通的桥梁——事件 ◇第14章 第 14 章“表单脚本” ，讲述如何使用 JavaScript 增强表单的交互性，突破浏览器的局限性。这一 章的讨论主要围绕单个表单元素如文本框、选择框，以及围绕数据验证和操作展开。 我只知道登录注册用到了表单…… ◇第15章 第 15 章“使用 Canvas 绘图” ，讨论了canvas标签以及如何通过它来动态绘图。不仅涵盖 2D 上下文，也将讨论 WebGL（3D）上下文，可以为创建动画和游戏夯实基础。 之前有用Canvas做了一个简单的画板，当然我只是参照视频敲了一遍 ◇第16章 第 16 章“HTML5 脚本编程” ，介绍了 HTML5 规定的 JavaScript API，涉及跨文档传递消息、拖 放 API 和以编程方式控制audio和video元素，以及管理历史状态。 我只用过audio引入了七牛的资源外链 ◇第17章 第 17 章“错误处理与调试” ，讨论浏览器如何处理 JavaScript 代码错误，并展示了一些处理错误 的方式。这一章针对每种浏览器分别讨论了相应的调试工具和技术，还给出了简化调试工作的建议。 log调试大法，你值得拥有 ◇第18章 第 18 章“JavaScript 与 XML” ，展示了 JavaScript 中用于读取和操作 XML（eXtensible Markup Language，可扩展标记语言）的特性。这一章分析了不同浏览器提供的 XML 支持和对象的差异，给出 了编写跨浏览器代码的简易方法。此外，这一章还介绍了用于在客户端转换XML数据的XSLT（eXtensible Stylesheet Language Transformations，可扩展样式表语言转换）技术。 说好的JSON呢？ ◇第19章 第 19 章“E4X” ，讨论了 E4X（ECMAScript for XML，ECMAScript中的 XML扩展）；设计 E4X的 出发点是简化 XML 处理任务。这一章探讨了在处理 XML 时，使用 E4X 与使用 DOM 相比有哪些 优势。 这个和JAVA的DOM4J有关系？ ◇第20章 第 20 章“JSON” ，介绍了作为 XML 替代格式的 JSON，包含浏览器原生支持的 JSON 解析和序 列化，以及使用 JSON 时要注意的安全问题。 我需要了解XML吗？ ◇第21章 第 21 章“Ajax 与 Comet” ，讲解了常用的 Ajax 技术，包括使用 XMLHttpRequest 对象及 CORS （Cross-Origin Resource Sharing，跨来源资源共享）API 实现跨域 Ajax 通信。这一章展示了浏览器在实 现与支持方面存在的差异，同时也给出了一些使用建议。 终于等到你，JavaScript又多了一个小伙伴儿——服务端 ◇第22章 第 22 章“高级技巧” ，深入讲解了一些 JavaScript 中较复杂的模式，包括函数柯里化（currying）、 部分函数应用和动态函数。这一章还讨论了如何创建自定义的事件框架和使用 ECMAScript 5 创建防篡 改对象。 没有了解过……无量天尊 ◇第23章 第 23 章“离线应用与客户端存储” ，讨论了如何检测应用离线以及在客户端机器中存储数据的各 种技术。先从受到最广泛支持的特性 cookie 谈起，继而介绍了新兴的客户端存储技术，如 Web Storage 和 IndexedDB。 了解过小饼干、localStorage、sessionStorage…… ◇第24章 第 24 章“最佳实践” ，探讨了在企业级环境中使用 JavaScript 的各种方式。其中，着眼于提高可 维护性的内容包括编码技巧、格式化和通用编程实践。这一章还介绍了改善代码执行性能及速度优化的 一些技术。最后讨论了部署问题，包括如何创建构建过程。 了解过前端MVC、webpack、parcel…… ◇第25章 第 25 章“新兴的 API” ，介绍了为增强浏览器中的 JavaScript 而创建的新 API。虽然这些 API 还没 有得到完整或全面的支持，但它们已经崭露头角，有些浏览器也已经部分地实现了这些 API。这一章的 内容主要是 Web 计时和文件 API。 我想这些新兴的API一定很强大 "},"A1-序+前言/一些辅助.html":{"url":"A1-序+前言/一些辅助.html","title":"一些辅助","keywords":"","body":"一些辅助 ★如何使用示例 不说需要的操作系统是怎样，以及浏览器的版本是怎样的……至于完整的示例源代码在哪儿呢？ 传送门：Professional JavaScript for Web 目前这本高程3，有第4版了，不过要在18年10月份出版 说实在的，这书还真是贵啊！要45美金，按照此刻的时间「:2018-07-29 09:47 」，就是「45美元=306.4365人民币元 」。也许这是相对而言的，或许在美国人眼中，这很便宜…… 扩展阅读：为什么美国的书价格会比中国高很多？、药价贵是因为研发成本高吗？ ★排版约定 ◇理解内容，把握重点 ✘：这种带警告图标的方框样式，表示与上下文相关的重要的、需要牢记的内容。 ✎：这种带钢笔图标的方框样式，表示与上下文相关的说明、提示、技巧、窍门和背景知识。 ◇正文中的样式说明 新术语及重要的词汇在首次出现时使用 加粗字体 以示强调； 表示键盘命令组合的方式是 Ctrl+A； 正文中的代码使用等宽字体，如 persistence.properties； 代码有两种样式： var obj = new Object(); // 大多数示例代码都没有加粗 var obj = new Object(); // 加粗的代码表示在上下文中特别重要 ★源代码 去哪找？——到 http://www.wrox.com 中下载 如何快速的找？ 由于很多书的书名看起来类似，所以更好的方式是通过书的 ISBN 来搜索它。本书原版的 ISBN 是 978-1-118-02669-4。 这个技巧刚刚没有使用，为此搜索出4个版本…… ★勘误（Errata）信息 金无足赤，人无完人。错误在所难免…… 欢迎来找茬，以及来看茬：Errata 看这个可以学英文 ★p2p.wrox.com 已经注册好了，都是英文，很难受…… 这本书的论坛，不过很冷清啊 ★译者留言 源码下载的短地址：http://tinyurl.com/projs-3rd-code 我请求了，然后打开的是上文的那个找源码的页面。我看了一下Network，看了一下响应： 301 Moved Permanently ——「301永旧重定向 」 Location: 「跳转页面的链接」 还可以到图灵社区找勘误和code资源，而且还有阅读计划哦，这个阅读计划很重要，不然按照我的阅读速度一年都读不完…… 想要更了解这本书，需要参与阅读计划…… ★致谢 似乎每一本书都有这个，我想「一本书的出版，只靠一个人？是不现实的。书出版的背后会有很多人的帮助」 ★关于技术编辑 技术编辑是做什么的？是检查书本有哪些错误？理顺作者的文字让读者更易接受？ 传送门：作家和编辑的区别是什么？、从技术编辑到 CEO，情怀真能当饭吃 ★Q&A ①金无足赤？ 足赤:足金，纯金。没有纯而又纯的金子。 比喻没有十全十美的事物 。 传送门：金无足赤，人无完人什么意思？ ②刊误和勘误有什么区别？ 【刊误】修改、订正文字上的错误。“刊误”侧重指改错； “勘误”意思为校正印刷品中的差错，侧重指校(jiào)勘。 传送门：刊误和勘误有什么区别 ③301和302？ 官方说法： 301，302 都是HTTP状态的编码，都代表着某个URL发生了转移。 不同之处在于： 301 redirect: 301 代表永久性转移(Permanently Moved)。 302 redirect: 302 代表暂时性转移(Temporarily Moved )。 传送门：HTTP返回码中301与302的区别、http状态码301和302详解及区别——辛酸的探索之路 "},"Ch01/":{"url":"Ch01/","title":"Ch01","keywords":"","body":"第1章　JavaScript简介 ★本章内容 JavaScript 历史回顾 JavaScript 是什么 JavaScript 与 ECMAScript 的关系 JavaScript 的不同版本 ★初认识 JavaScript生于1995年，在此之前，人们是普遍使用电话拨号上网的年代。而拨号上网速度极慢。那时用户填写的表单，是在后端校验的，可不像今天可以在前端校验，一旦出错了，这一来一回的，折腾来折腾去的，真是会让人爆一句粗口「见鬼去吧！耐心……」。为此，JavaScript出生的机缘就来了…… 自打JavaScript出生以来，它就有了这些很牛逼的话： 市面上常见浏览器必备的一项特色功能 不局限于简单的数据校验，具备了与浏览器窗口及其内容等几乎所有方面交互的能力（BOM和DOM） 一门功能全面的编程语言，可处理复杂的计算和交互，拥有了闭包、匿名（lamda，拉姆达）函数，甚至元编程等特性。 Web 的一个重要组成部分，那些非常规浏览器都支持它 ★想不到吧 你以为我JavaScript只是个简单的输入验证器？想不到吧，我现在是一门强大的编程语言。我要感谢那些设计我、实现我、嘲讽我、刁难我的人，当然，更要感谢互联网这个时代背景…… 我JavaScript是门既简单又复杂的语言，为什么这么说呢？因为学会使用我只需片刻功夫，所以这是简单的；而复杂在于要真正掌握我则需要数年时间。就像是一场由恋爱到婚姻的马拉松，所以你要坚持哦！万一哪天我就会嫁给你了…… ★小结 要想全面理解和掌握 JavaScript，关键在于弄清楚它的本质、历史和局限性。 ★Q&A ①元编程为何特性？ 传送门：怎么理解元编程？ 最高票答案： 广义理解：泛泛来说，只要是与编程相关的编程就算是 meta-programming 了 狭义理解：「编写能改变语言语法特性或者运行时特性的程序」。换言之，一种语言本来做不到的事情，通过你编程来修改它，使得它可以做到了，这就是元编程。 我觉得这个答案最简洁： 一般代码的操作对象是数据 元编程操作的对象是其他代码 至此，也就是说JavaScript具有这种不明觉厉的操作咯！难怪会有这句话： eval is evil 可为啥要说eval是个魔鬼？(⊙o⊙)…详情参考：JavaScript 为什么不推荐使用 eval？ babel算吗？按我的理解使用babel这个工具操作的对象也是代码，所以babel这个工具是元编程的实现？ 还有广义上说，使用了语法糖重构的代码？也算是元编程吗？如循环等操作 注意：可以不是操纵自身语言的编程的编程，比如Ruby以其元编程易用又强大，被许多人拿来写 DSL …… ps：还有一些诸如元数据、元认知等等的概念，总之我就照葫芦画瓢，加工数据的数据、加工认知的认知，有种种庄稼的味道，如丢个种子，施肥浇水，生根发芽。类似的丢个代码种子…… 扩展内容：元编程、如何有效地记忆各种“名词解释”？、元编程之javascript、Javascript元编程（一）、编程范式 ②狭义与广义？ 广义是指范围大，宽广。 狭义是指范围比较小，狭窄。 广义和狭义意思相对。所谓范围的宽窄是指概念的外延的大小。如： 「雷锋」狭义是雷锋本人 ，而广义则是所有为人民服务的人 「吃饭」狭义是吃米饭，而广义则是吃午、晚餐 …… 当然，这有具体和抽象的「味道」 总之对某些概念的理解，一般都会选择广义去理解 …… 传送门：为什么许多概念要分狭义和广义？、狭义，广义是什么意思、什么是广义,什么是狭义 "},"Ch01/JavaScript简史.html":{"url":"Ch01/JavaScript简史.html","title":"JavaScript简史","keywords":"","body":"1.1　JavaScript简史 ★出现原因 那时大多数网民的网速就只有28.8kib/s，然而网页的内容和复杂性（如简单的表单验证）却是在不断地增加。可想而知，就如政治课本常说的那句话一样： 我国社会的主要矛盾是人民日益增长的物质文化需要同落后的社会生产之间的矛盾 想要提高网速？——想都不要想 为此Netscape公司（大佬），决定着手开发一种客户端语言，用于处理简单的验证。总之就是在数据提交到服务器之前，希望有个程序可以过滤一下。 ★谁设计的JavaScript 来自当时就职于 Netscape 公司的布兰登·艾奇（Brendan Eich）。本来是叫LiveScript的，可为了炒热公司即将发布的Netscape Navigator 2（搭配了脚本语言的浏览器很高大尚），而当时恰巧Java红红火火，于是就改名为JavaScript了。这就是JavaScript的1.0版本…… ★JavaScript的发展势头 由于JavaScript1.0大热，为此趁热打铁， Netscape 随即在 Netscape Navigator 3 中又发布了 JavaScript 1.1 IE3.0添加JavaScript（具体一点指的是JScript）以后，标志着 JavaScript 作为一门语言，其开发向前迈进了一大步。毕竟微软正式进军了Web浏览器领域，而有了竞争对手，产品才会更强大…… ★Netscape VS 微软 微软：看不起我家IE浏览器是吧？还把自己公司定位为市场领袖型公司是吧？他奶奶的，你们不是发布了版本3的浏览器吗？这下我就对自家产品IE投入更多资源。不好意思，我要发布IE3了，而且我也要添加脚本语言，名字叫「JScript」。抱歉我家的「JScript」是基于你们家的 Netscape JavaScript 1.0 开发的，就是气死你，呵呵哒…… ★两个不同版本的JavaScript 一个是Netscape Navigator 中的 JavaScript 一个是Internet Explorer 中的 JScript 版本有了差异，那么写JavaScript的开发的开发人员，就得要学这个版本的语法了啊！一个页面要写两份，岂不是要GG了…… 其它编程语言，如C等都是有标准规定语法和特性的。况且Web势头发展是很猛的，日后说不定会有其它的浏览器产商，为此随着业界担心的日益加剧，JavaScript的标准化问题被提上了议事日程。 ★JavaScript1.1、ECMA、ISO/IEC 1997年，以JavaScript1.1为蓝本很荣幸地被建议提交到了ECMA，而基于JavaScript1.0实现的JScript就没有这个荣幸了。ECMA指定TC39（关注脚本语言发展的公司的程序员组成，如 Netscape、Sun、微软……）负责“标准化一种通用、跨平台、供应商中立的脚本语言的语法和语义”。TC39就像是编辑一样，而JavaScript1.1则是原稿，编辑经过数月的努力完成了 ECMA-262——定义一种名为 ECMAScript（发音为“ek-ma-script”）的新脚本语言的标准。 1998年，ISO/IEC也采用了 ECMAScript 作为标准（即 ISO/IEC-16262）。自此以后，浏览器开发商就开始致力于将 ECMAScript 作为各自 JavaScript 实现的基础，也在不同程度上取得了成功。 ★小结 JavaScript的简史： 种子阶段： 在Web日益流行的背景下，网页的大小和复杂性开始不断地增加，而网速依旧如此的慢，如做个表单验证也要考验用户的耐心——为此Netscape 公司打算开发一种客户端语言 发芽阶段： 布兰登·艾奇为Netscape Navigator 2 开发一种名为 JavaScript 的脚本语言，这是JavaScript1.0 成长阶段： Netscape在 Netscape Navigator 3 中发布了 JavaScript 1.1，而微软不灭威风，在IE3.0中发布了基于JavaScript1.0的JScript 由于不同版本并存的JavaScript会在日后导致很多问题，所以需要有标准规定 JavaScript 的语法和特性。为此1997年， JavaScript 1.1以蓝本的身份被提交到了ECMA，数月后TC39发布了ECMAScript-262——定义一种名为 ECMAScript的新脚本语言的标准。 1998年，ISO/IEC也采用了 ECMAScript 作为标准（即 ISO/IEC-16262）。从此，浏览器开发商就开始致力于将 ECMAScript 作为各自 JavaScript 实现的基础。 …… ★Q&A ①蓝本为何意？ 它的同义词是底本，到底蓝本是不是同原稿一个意思，根据这个：原稿跟草稿有什麼差??? 东东说到的「原稿纸专用的蓝色铅笔」，而这里说的蓝色铅笔在其答案中有提到： 蓝色铅笔：是因为在印制成书时，这种蓝色铅笔画上去是不会被印出来的，所以有些漫画家就用这个来画在原稿上。 同样有个蓝字，那么蓝本和原稿就是一个意思咯！ 那么这样的话：「这部电视剧以同名小说为蓝本改编而成 」？我在想为啥出版的书会有错别字？是原稿的锅，还是校稿的锅？或者说都有责任…… ==总之，你的简历最好不要有错别字== ②Ecma、TC39、ISO/IEC？ 都是制定标准的，那么制定标准的意义何在呢？——你要知道一个东西是好的还是不好的是相对而言的，就如面试要求说「你这个技能是了解？熟练？还是精通？」一样，没有一个共有的标准的话 ，那么沟通起来就GG了……如前后端撕逼大战，互相丢锅…… ③邯郸学步？ 释义： 比喻一味模仿别人,非但没有学到别人的长处,反倒失去了自身的特色。也作学步邯郸。 不要只是模仿结果，因为这只是量的堆积而已，你得要去发现这样做的逻辑所在，然后加以运用到自己未知的事物身上，总之有种「元」的味道，或者说是触类旁通…… ④「脚本」是什么东东？ 在演员眼中，就是看脚本说台词；在程序员眼中，就是一系列指令 ，不过这些指令是给计算机看，然后解释执行的，特点是短小精悍、自动化（程序都有这样的标签） ⑤Netscape Navigator 「1/2/3」 是什么鬼？ 这是版本号啊！而且是这样的： 版本号没有统一的标准，完全由开发者自己决定。但比较常见的是X.Y.Z的版本标示，X更新的话就表示有重大更新，如界面重大更新等，或者不兼容老版本；Y更新表示添加了新的功能；Z表示修订错误和bug。 也有的软件用发布的年月做表示，比如Ubuntu就是如此。 摘录自：软件升级时，版本号是怎么定的？ - Xizhi Zhu的回答 - 知乎 我看了一下自己的npm和node版本： npm：3.10.9 node：v6.9.2 node多了个v也许是更明确这是版本之意，目前npm的稳定版本是6.2.0 ，而node当前最新版本为10.7.0 关于node的版本有两个可选的下载：一个是LTS（全称是Long Term Support，长期支持版），一个是Current。前者是推荐广大用户使用的，它们二者这个的区别呢？ LTS版本支持之前的一些老版本特性，可以让你丝滑升级！ 即可靠，稳定 ，可以线上使用。 Current版本指新版本不是beta版本 ，由于是新的，可能会有不可预料的bug…… 参考：Node.js 的 LTS 版本意味着什么？ 这是不是意味着，我可以升级本地的node，我之前一直在想要把node给升级了，可是那些与它依赖在一起的工具会不会受到影响？ 试一下？ 升级npm： npm -g install npm@5.6.0 而node呢？听说windows系统下只有覆盖安装了，而且是在原安装目录安装覆盖…… 于node官网上下载，安装后，检查当前node的版本为v8.11.3，而npm则是5.6.0 目前还未测试过，不知道gitbook等工具会不会受到影响，照理说，应该不会的…… ps：由于Ruby 靠 z 的奇偶来区分 stable 和 test ，所以node的版本是不是也是如此，就不得而知了。npm更新后，我就不用在安装依赖的时候添加 -S等参数了…… ⑥目前各大浏览器的对ECMAScript的兼容性情况？ 传送门：ECMAScript、Kangax’ ES7 兼容性表 ★参考链接 蓝本 、蓝本是什么意思啊？、如何理解Flask中的蓝本？ 书籍出版前都是如何校对的？一个字一个字的看吗？ 编辑/校對工作主要是做什麼的？入行門檻高嗎？ 为什么正版图书里也会出现错别字呢？ 如何出版一本书？ 你以为编辑看稿子就是看错别字和病句吗？大错特错！ 投稿有错别字，编辑看到了会不会直接OUT掉啊？ Ecma国际、ECMAScript [译] TC39，ECMAScript 和 JavaScript 的未来（Part 1）、★控制ECMAScript版本发布的TC39流程 ISO、IEC、GB、ISO、IEC、IEEE标准有什么区别？、 ★ISO、IEC、ITU——国际三大标准化组织 人们为什么要制定标准或是规范，“标准”都有什么作用，请举例说明，场景尽量宽泛些？ 面试词典：什么叫精通？什么叫熟悉？什么叫了解？ 邯郸学步、邯郸学步的故事、邯郸学步 如何用通俗易懂的语言解释脚本（script）是什么？ 软件的版本号有时候会类似 1.0.1 / 3.5.3，这些都是怎么决定的？ "}}