{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction 这是JavaScript高级程序设计（第3版）的笔记 每日半小时，阅读多少算多少…… 偶遇了一些感觉很强大的专栏，✎： ➹：初级前端工程师 偶遇了一些感觉很强大的视频资源，✎： ➹：DOM探索之基础详解篇-慕课网 "},"阅读计划.html":{"url":"阅读计划.html","title":"阅读计划","keywords":"","body":"阅读计划 按照这个来：《JavaScript高级程序设计（第3版）》 阅读计划 总之就是这样： ★1~7章 阅读目的：熟习JavaScript的语法，理解那些JavaScript中让人疑惑的概念 推荐阅读时间：8~12天（累计192页，每天至少阅读 16页 能达成目标） ★8~14章 阅读目的： 熟习JavaScript运行的环境，深刻理解DOM，熟习DOM提供给JS的原生API 推荐阅读时间：10~15天（累计251页，每天至少阅读 17页 可达成目标） ★15~16章 阅读目的：学习HTML新增的一些对象提供的API，包括 canvas ，媒体事件等 推荐阅读时间：2~3天（累计49页，每天至少阅读 17页 可达成目标） ★17章 阅读目的：学习在浏览器中进行实际开发时的错误调试技巧 推荐阅读时间：1~2天（累计27页，每天至少阅读 14页 可达成目标） ★18~21章 阅读目的：学习JS对各数据载体的操作方法（如JSON、XML），学会Ajax的使用方法 推荐阅读时间： 4~5天（累计74页，每天至少 15页 可达成目标） ★22~25章 阅读目的：学习JS的一些高级技巧及实践方案 推荐阅读时间：4~6天（累计106页，每天至少 17页 可达成目标） 依据上述计划，本书推荐完成时间为30~45天。 "},"FAQ.html":{"url":"FAQ.html","title":"FAQ","keywords":"","body":"FAQ ★Gitbook使用 ◇插件 search-plus：支持中文全文搜索的插件，默认的只支持搜索英文关键字 ◇内容书写语法 不能出现html标签，为此目前只能用倾斜的语法 **来表示了，而且需要注意是字符之间要连贯起来，毕竟你没有加<>也会被渲染出来 如这样：console.log(1) 这块是看不见的，你 Ctrl+shift+I一下这块区域，直白一点就是「右键→☞检查」 或者是这样： script console.log(2) /script 还有这样： console.log('Hello！world ') 当然后面两个写法在本地浏览是没事的，可是提交到远程仓库就出问题了，可这有区别吗？真是醉了…… ps：又可以了，真是没事找事了，其实说实在的你见过哪个标签是不写 <>是可以运行的？下次出错就看一下markdown语法有没有写错……毕竟是直接用Typora写的笔记 本地markdown是可以显示不加http协议的超链接的，而markdown转html后，就得注意了，得要加上http协议才行，如这样 http://www.baidu.com，而不是 www.baidu.com 突然发觉之前的一些超链接的markdown显示需要用<>括起来，不然相邻的字符就会被收拢为链接的一部分了 总之本地markdown显示的样子和其转换成html的样子，不一定一模一样 ★怎么更好地记笔记 目录创建：根据这本书的源码可知，是以Ch01~Ch25这样的目录名划分的，所以我就按照这样创建目录，划分章节，而目录下面则是一个关于该目录的readme.md、还有各个一级子章节。 之前打算一个章节一个章节来记，可这样做会很让内容很长，看起来很不舒服，所以尽量划分得细一点，而且这样会让你感觉「又一个任务完成了」，为此成就感油然而生，而不是一个很大的任务压在心头。总之就是，把「看一个章节的任务」划分成「看很多个子章节的任务」 把所有参考链接到最后收拢到最后，不然你在每个问题的回答后面追加会很不美观，而且这样是做了两件事的结果，一件是自己归纳的答案，一件是拷贝的链接。你会发现很多博客都是这样做的，有时候你不知道为啥要这样做？可当你遇到不这样做而导致出现这样、那样的问题之后，你才会明然这样做的意义所在。 难道我要不问所以然的拷贝吗？我觉得先拷贝一段时间，然后再去探索不这样做会有怎样的bug……有种「王国维的三重境界说」的味道…… 如何更好地归纳内容？有这么两种可行的方式，扁平式和总分总式，前者言简意赅「形容言语简练而意思完整 」，而后者则是层次分明。推荐书籍：卡内基的《魅力口才与演讲的艺术》 。 参考链接：如何提高自己的归纳总结能力？ 一些标记：（使用搜狗的「自定义短语设置」） ad：**✔：**→☞✔：表示正确姿势 ac：**✘：**→☞✘：表示错误姿势 ae：**✎：**→☞✎：举例子 ajt：**➹：**→☞➹：扩展阅读 aw：**？：**→☞？：扩展提问（指自身提出的疑问） 命名原则：a（前缀，相当于是命名空间），d（对）、c（错）、e（example）、jt（箭头）、w（问） ★辅助操作 ◇Chrome 复制地址栏→☞✔：F6、Ctrl+C ？：如果复制的中文链接没有被转义就好了…… ➹：如果你用 Chrome 浏览器，一定要学会这 27 个超好用功能、Chrome 键盘快捷键 ps：由于 F6不好摁，所以→☞✔：Ctrl+L、Ctrl+C "},"A1-序+前言/序.html":{"url":"A1-序+前言/序.html","title":"序","keywords":"","body":"序 大佬雷最初把JavaScript当作是玩具语言，如认为它只能在页面搞点有意思的交互效果作为装饰。可随着Ajax的出现，大佬雷就懵逼了，这TM还是之前所认为的玩具语言吗？ 我实在想不明白为啥Ajax的出现会让JavaScript变得如此有魅力？ 我想JavaScript本来只是跟页面玩的，可是Ajax的出现，让它多了一个小伙伴儿——服务器，这样一来，它能做的事儿也就变得多样了。 JavaScript很强大吗？如果是，那么它提供了哪些「法宝」来证明它的强大呢？ ★关于这本书 即便你认识了JavaScript好几年了，但是你仍然可以从这本书中学到很多新东西 特点：实实在在、深入浅出 风格：贴切自然 总之： 这本书从介绍表达式和变量声明开始，平滑地过渡到了闭包、面向对象开发等高级主题。与那些把 大量篇幅花在讲解背景知识上的书，以及那些让人感觉好像是要使用 JavaScript 开发导弹制导系统的书 相比，这本书让人感觉细致周到、亲切自然。这是一本写给“普通人”的书，它能让你编写出引以为荣 的代码，构建出令人叫绝的网站。 ★Q&A ①什么叫玩具语言？ 只能玩玩的语言，即相较其它语言只能做些简单活儿的语言……我只能这样认为了。 ps：我在搜索答案的过程中，偶遇的传送门：我的第一个玩具语言 JCScheme 问世了 "},"A1-序+前言/前言.html":{"url":"A1-序+前言/前言.html","title":"前言","keywords":"","body":"前言 ★JavaScript 当今世界最流行（(⊙o⊙)…或许吧！） 一种非常松散的面向对象语言，也是 Web 开发中极受欢迎的一门语言 语法和编程风格与 Java 都很相似，但是这跟Java没有半毛钱关系 一种全新的动态语言（运行时才确定变量类型……） 主要活在Web 浏览器之中（浏览器外的 Javascript 运行环境有哪些？） 目标：致力于增强网站和Web 应用程序的交互性。（Web网站和Web应用程序不是一个意思啊！一个以展示为主，一个以功能为主。我第一次理解这个目标就是为啥不是与用户的交互？而是这两个基佬在交互，所以我觉得应该是二者对用户的交互性。我不知道是不是我理解有问题？还是翻译有问题？为此可以有：「致力于增强网站或者Web 应用程序与用户之间的交互性」） ★本书的逻辑 追根溯源→☞DOM、Ajax ★你会学到什么 掌握如何运用和扩展（难道是ES6/7/8/9之意？）JavaScript这门语言，以此来更好地满足自己的需求 掌握如何实现客户端与服务器的无缝通信 反正就是：教会你在面对各种常见的 Web 开发问题时，如何拿出自己的 JavaScript 解决方案。 ★Q&A ①Web网站和Web应用程序的区别？ 传送门：Web应用程序与网站之间的区别 其中一位网友xxx的总结： 一个web应用程序是一个能够让用户完成某些特定任务的网站。而一个普通的网站的主要目标是给用户提供信息(博客，新闻，指导，等)。 对了，xxx网友还有一个关于电灯泡和发电厂的比喻，让我感觉很有味道，如果没有用电的器具，那么发电厂是否有存在的必要呢？可是没有了电，这些需要电的器具也没有存在的必要了。总之，有些时候，你不能忽视这个正在使用的东西的背后做了哪些事儿…… ②ES5是什么鬼？ 规范？标准？（规范或者标准这TM不是一个意思？）反正有总结： 标准、规范、规程都是标准的一种表现形式，习惯上统称为标准 简单地说规范是对行为、条件的要求和规定，规程是对过程的要求和规定，标准是对结果（或产品）的要求和规定。 自打学编程以来，总喜欢抠字眼，总喜欢针对语义有交集、长得很像的词，如这样的：架构、构架、结构、框架之间有什么区别？ 所以把ES称为标准吧！那么ES5，就是标准的第5个版本咯！详情参考：ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？ ③交互性？ 传送门：交互性 、交互设计 这个家伙的概念没有定性，在不同的领域里其含义是不同的。当然「交互性主要运用于计算机及多媒体领域 」，所以可有其含义为： 交互性即当你点击一个链接时到达一个新的页面 当我点击上面那两个链接的时候，就跳转到另外一个页面了，就像是人机交互的基础方式： 交互过程是一个输入和输出的过程，人通过人机界面向计算机输入指令，计算机经过处理后把输出结果呈现给用户。人和计算机之间的输入和输出的形式是多种多样的，因此交互的形式也是多样化的。 也就是说我输入了一个「点击」，然后计算机或者具体一点就是浏览器输出的是「新开一个窗口打开一个新页面」。由于输入和输出都是多样的，那么诸如用户「回车」「滚动」「鼠标悬停」等输入指令，为此对应的输出也是各有各的花招了…… ps：交互是互通的、双向的、的，浏览器的输出可以当作是用户的输入，作用对象不同，说法也不同了……同时可以想到请求与响应，响应回来的数据，前端开发者把这些数据作为输入，然后按进行下一步逻辑操作，输出到页面，所以可有这样的有bug的回路：用户→☞前端开发者→☞后端开发者→☞前端开发者→☞用户。这让我想起了计算机的三大原则： 计算机是执行输入、运算、输出的机器 程序是指令和数据的集合 计算机的处理方式有时与人们的思维习惯不同 ——来自「计算机是怎样跑起来的」一书 一个不恰当的比喻，就如小时候玩的扔沙袋游戏，用户是扔沙袋的人，前后端开发者则是在圈圈里如何灵活躲闪飞过来的沙袋的人，这用户看起来就像是老大…… 扩展阅读：JavaScript事件有哪些？、事件 "},"A1-序+前言/本书内容.html":{"url":"A1-序+前言/本书内容.html","title":"本书内容","keywords":"","body":"本书内容 ★完全照搬 本书提供了 JavaScript 开发人员必须掌握的内容，全面涵盖了 JavaScript 的各种高级、有用的特性。 本书首先介绍了 JavaScript 的起源及其发展现状，随后讨论了构成 JavaScript 实现的各个组成部分，重点讲解了 ECMAScript 和 DOM 标准。此外，还对不同 Web 浏览器的 JavaScript 实现之间存在的差异，给出了相应的说明。 在此基础上，本书从讲解 JavaScript 的基本概念入手，探讨了 JavaScript 面向对象程序设计和继承的方式，以及如何在 HTML 等标记语言中使用它。在深入剖析了事件和事件处理之后，又解释了各种浏览器检测技术。本书还探讨了 HTML5、Selectors API 和 File API 等一系列新 API。 本书最后一部分专门讨论了高级主题，涉及性能和内存优化、最佳实践以及对 JavaScript 未来的展望。 想要关注的点：面向对象、继承、事件、性能和内存优化…… "},"A1-序+前言/本书结构.html":{"url":"A1-序+前言/本书结构.html","title":"本书结构","keywords":"","body":"本书结构 ★完全照搬 本书共 25 章，各章简介如下。 ◇第1章 第 1 章“JavaScript 简介” ，讲述了 JavaScript 的起源：因何而生，如何发展，现状如何。涉及的 概念主要有 JavaScript 与 ECMAScript 之间的关系、DOM（Document Object Model，文档对象模型）、 BOM（Browser Object Model，浏览器对象模型）。此外，还将讨论 ECMA（European Computer Manufacturer’s Association，欧洲计算机制造商协会）和 W3C（World Wide Web Consortium，万维网联 盟）制定的一些相关标准。 JavaScript的成长路 ◇第2章 第 2 章“在 HTML 中使用 JavaScript” ，介绍了如何在 HTML 中使用 JavaScript 创建动态网页。 这一章不仅展示了在网页中嵌入 JavaScript 的各种方式，还讨论了 JavaScript 内容类型（content-type）及 其与script元素的关系。 对JavaScript的初使用 ◇第3章 第 3 章“基本概念” ，讨论了 JavaScript 语言的基本概念，包括语法和流控制语句。这一章也分析 了 JavaScript 与其他基于 C 的语言在语法上的相同和不同之处，还介绍了与内置操作符有关的类型转换 问题。 认识它的基本语法 ◇第4章 第 4 章“变量、作用域和内存问题” ，探讨了 JavaScript 如何处理其松散类型的变量。这一章还讨 论了原始值和引用值之间的差别，以及与变量有关的执行环境的相应内容。最后，通过介绍 JavaScript 的垃圾收集机制，解释了变量在退出作用域时释放其内存的问题。 什么叫松散类型？ ◇第5章 第 5 章“引用类型” ，详尽介绍了 JavaScript 内置的所有引用类型，如 Object 和 Array。这一 章对 ECMA-262 规范中描述的每一种引用类型既做了理论上的阐释，又从浏览器实现的角度给出了 介绍。 Array是对象吗？ ◇第6章 第 6 章“面向对象的程序设计” ，讲述了在 JavaScript 中如何实现面向对象的程序设计。由于 JavaScript 没有类的概念，因此这一章从对象创建和继承的层面上展示了一些流行的技术。此外，这一 章还讲解了函数原型的概念，并对函数原型与整个面向对象方法的关系进行了探讨。 听说ES6有类的概念了 ◇第7章 第 7 章“函数表达式” ，集中介绍了 JavaScript 中最为强大的一个特性——函数表达式。相关的内 容涉及闭包、this 对象的角色、模块模式和创建私有对象成员等。 那些年立即执行函数表达式与闭包不得不说的秘密，还有它们俩的爱情结晶this ◇第8章 第 8 章“BOM” ，介绍 BOM（Browser Object Model，浏览器对象模型），即负责处理与浏览器自 身有关的交互操作的对象集合。这一章全面介绍了每一个 BOM 对象，包括 window、document、location、navigator 和 screen。 超然于页面之外 ◇第9章 第 9 章“客户端检测” ，讨论了检测客户端机器及其支持特性的各种手段，包括特性检测及用户代 理字符串检测的不同技术。这一章还就每种手段的优缺点及适用情形给出了详细说明。 难道是使用「如果……那么……」？ ◇第10章 第 10 章“DOM” ，介绍 DOM（Document Object Model，文档对象模型），即 DOM1 规定的 JavaScript 中的 DOM 对象。这一章也简要介绍了 XML 及其与 DOM 的关系，为深入探讨所有 DOM 规范及其定义 的操作网页的方式奠定了基础。 我JavaScript就是饿死，也不操纵页面……真香 ◇第11章 第 11 章“DOM 扩展” ，介绍了其他 API 以及浏览器本身为 DOM 添加的各种功能。涉及内容包括 Selectors API、Element Traversal API 和 HTML5 扩展。 有这茬子事吗？我怎么不知道？ ◇第12章 第 12 章“DOM2 和 DOM3” ，在前两章的基础上继续探讨了 DOM2 和 DOM3 中新增的 DOM 属 性、方法和对象。这一章还讨论了 IE 与其他浏览器的兼容性问题。 IE的事儿？我不管了 ◇第13章 第 13 章“事件” ，解释了 JavaScript 中事件的本质，对遗留机制的支持，以及 DOM对事件机制的 重新定义。这一章讨论了多种设备，包括 Wii 和 iPhone。 用户与JavaScript沟通的桥梁——事件 ◇第14章 第 14 章“表单脚本” ，讲述如何使用 JavaScript 增强表单的交互性，突破浏览器的局限性。这一 章的讨论主要围绕单个表单元素如文本框、选择框，以及围绕数据验证和操作展开。 我只知道登录注册用到了表单…… ◇第15章 第 15 章“使用 Canvas 绘图” ，讨论了canvas标签以及如何通过它来动态绘图。不仅涵盖 2D 上下文，也将讨论 WebGL（3D）上下文，可以为创建动画和游戏夯实基础。 之前有用Canvas做了一个简单的画板，当然我只是参照视频敲了一遍 ◇第16章 第 16 章“HTML5 脚本编程” ，介绍了 HTML5 规定的 JavaScript API，涉及跨文档传递消息、拖 放 API 和以编程方式控制audio和video元素，以及管理历史状态。 我只用过audio引入了七牛的资源外链 ◇第17章 第 17 章“错误处理与调试” ，讨论浏览器如何处理 JavaScript 代码错误，并展示了一些处理错误 的方式。这一章针对每种浏览器分别讨论了相应的调试工具和技术，还给出了简化调试工作的建议。 log调试大法，你值得拥有 ◇第18章 第 18 章“JavaScript 与 XML” ，展示了 JavaScript 中用于读取和操作 XML（eXtensible Markup Language，可扩展标记语言）的特性。这一章分析了不同浏览器提供的 XML 支持和对象的差异，给出 了编写跨浏览器代码的简易方法。此外，这一章还介绍了用于在客户端转换XML数据的XSLT（eXtensible Stylesheet Language Transformations，可扩展样式表语言转换）技术。 说好的JSON呢？ ◇第19章 第 19 章“E4X” ，讨论了 E4X（ECMAScript for XML，ECMAScript中的 XML扩展）；设计 E4X的 出发点是简化 XML 处理任务。这一章探讨了在处理 XML 时，使用 E4X 与使用 DOM 相比有哪些 优势。 这个和JAVA的DOM4J有关系？ ◇第20章 第 20 章“JSON” ，介绍了作为 XML 替代格式的 JSON，包含浏览器原生支持的 JSON 解析和序 列化，以及使用 JSON 时要注意的安全问题。 我需要了解XML吗？ ◇第21章 第 21 章“Ajax 与 Comet” ，讲解了常用的 Ajax 技术，包括使用 XMLHttpRequest 对象及 CORS （Cross-Origin Resource Sharing，跨来源资源共享）API 实现跨域 Ajax 通信。这一章展示了浏览器在实 现与支持方面存在的差异，同时也给出了一些使用建议。 终于等到你，JavaScript又多了一个小伙伴儿——服务端 ◇第22章 第 22 章“高级技巧” ，深入讲解了一些 JavaScript 中较复杂的模式，包括函数柯里化（currying）、 部分函数应用和动态函数。这一章还讨论了如何创建自定义的事件框架和使用 ECMAScript 5 创建防篡 改对象。 没有了解过……无量天尊 ◇第23章 第 23 章“离线应用与客户端存储” ，讨论了如何检测应用离线以及在客户端机器中存储数据的各 种技术。先从受到最广泛支持的特性 cookie 谈起，继而介绍了新兴的客户端存储技术，如 Web Storage 和 IndexedDB。 了解过小饼干、localStorage、sessionStorage…… ◇第24章 第 24 章“最佳实践” ，探讨了在企业级环境中使用 JavaScript 的各种方式。其中，着眼于提高可 维护性的内容包括编码技巧、格式化和通用编程实践。这一章还介绍了改善代码执行性能及速度优化的 一些技术。最后讨论了部署问题，包括如何创建构建过程。 了解过前端MVC、webpack、parcel…… ◇第25章 第 25 章“新兴的 API” ，介绍了为增强浏览器中的 JavaScript 而创建的新 API。虽然这些 API 还没 有得到完整或全面的支持，但它们已经崭露头角，有些浏览器也已经部分地实现了这些 API。这一章的 内容主要是 Web 计时和文件 API。 我想这些新兴的API一定很强大 "},"A1-序+前言/一些辅助.html":{"url":"A1-序+前言/一些辅助.html","title":"一些辅助","keywords":"","body":"一些辅助 ★如何使用示例 不说需要的操作系统是怎样，以及浏览器的版本是怎样的……至于完整的示例源代码在哪儿呢？ 传送门：Professional JavaScript for Web 目前这本高程3，有第4版了，不过要在18年10月份出版 说实在的，这书还真是贵啊！要45美金，按照此刻的时间「:2018-07-29 09:47 」，就是「45美元=306.4365人民币元 」。也许这是相对而言的，或许在美国人眼中，这很便宜…… 扩展阅读：为什么美国的书价格会比中国高很多？、药价贵是因为研发成本高吗？ ★排版约定 ◇理解内容，把握重点 ✘：这种带警告图标的方框样式，表示与上下文相关的重要的、需要牢记的内容。 ✎：这种带钢笔图标的方框样式，表示与上下文相关的说明、提示、技巧、窍门和背景知识。 ◇正文中的样式说明 新术语及重要的词汇在首次出现时使用 加粗字体 以示强调； 表示键盘命令组合的方式是 Ctrl+A； 正文中的代码使用等宽字体，如 persistence.properties； 代码有两种样式： var obj = new Object(); // 大多数示例代码都没有加粗 var obj = new Object(); // 加粗的代码表示在上下文中特别重要 ★源代码 去哪找？——到 http://www.wrox.com 中下载 如何快速的找？ 由于很多书的书名看起来类似，所以更好的方式是通过书的 ISBN 来搜索它。本书原版的 ISBN 是 978-1-118-02669-4。 这个技巧刚刚没有使用，为此搜索出4个版本…… ★勘误（Errata）信息 金无足赤，人无完人。错误在所难免…… 欢迎来找茬，以及来看茬：Errata 看这个可以学英文 ★p2p.wrox.com 已经注册好了，都是英文，很难受…… 这本书的论坛，不过很冷清啊 ★译者留言 源码下载的短地址：http://tinyurl.com/projs-3rd-code 我请求了，然后打开的是上文的那个找源码的页面。我看了一下Network，看了一下响应： 301 Moved Permanently ——「301永旧重定向 」 Location: 「跳转页面的链接」 还可以到图灵社区找勘误和code资源，而且还有阅读计划哦，这个阅读计划很重要，不然按照我的阅读速度一年都读不完…… 想要更了解这本书，需要参与阅读计划…… ★致谢 似乎每一本书都有这个，我想「一本书的出版，只靠一个人？是不现实的。书出版的背后会有很多人的帮助」 ★关于技术编辑 技术编辑是做什么的？是检查书本有哪些错误？理顺作者的文字让读者更易接受？ 传送门：作家和编辑的区别是什么？、从技术编辑到 CEO，情怀真能当饭吃 ★Q&A ①金无足赤？ 足赤:足金，纯金。没有纯而又纯的金子。 比喻没有十全十美的事物 。 传送门：金无足赤，人无完人什么意思？ ②刊误和勘误有什么区别？ 【刊误】修改、订正文字上的错误。“刊误”侧重指改错； “勘误”意思为校正印刷品中的差错，侧重指校(jiào)勘。 传送门：刊误和勘误有什么区别 ③301和302？ 官方说法： 301，302 都是HTTP状态的编码，都代表着某个URL发生了转移。 不同之处在于： 301 redirect: 301 代表永久性转移(Permanently Moved)。 302 redirect: 302 代表暂时性转移(Temporarily Moved )。 传送门：HTTP返回码中301与302的区别、http状态码301和302详解及区别——辛酸的探索之路 "},"Ch01/":{"url":"Ch01/","title":"Ch01","keywords":"","body":"第1章　JavaScript简介 ★本章内容 JavaScript 历史回顾 JavaScript 是什么 JavaScript 与 ECMAScript 的关系 JavaScript 的不同版本 ★初认识 JavaScript生于1995年，在此之前，人们是普遍使用电话拨号上网的年代。而拨号上网速度极慢。那时用户填写的表单，是在后端校验的，可不像今天可以在前端校验，一旦出错了，这一来一回的，折腾来折腾去的，真是会让人爆一句粗口「见鬼去吧！耐心……」。为此，JavaScript出生的机缘就来了…… 自打JavaScript出生以来，它就有了这些很牛逼的话： 市面上常见浏览器必备的一项特色功能 不局限于简单的数据校验，具备了与浏览器窗口及其内容等几乎所有方面交互的能力（BOM和DOM） 一门功能全面的编程语言，可处理复杂的计算和交互，拥有了闭包、匿名（lamda，拉姆达）函数，甚至元编程等特性。 Web 的一个重要组成部分，那些非常规浏览器都支持它 ★想不到吧 你以为我JavaScript只是个简单的输入验证器？想不到吧，我现在是一门强大的编程语言。我要感谢那些设计我、实现我、嘲讽我、刁难我的人，当然，更要感谢互联网这个时代背景…… 我JavaScript是门既简单又复杂的语言，为什么这么说呢？因为学会使用我只需片刻功夫，所以这是简单的；而复杂在于要真正掌握我则需要数年时间。就像是一场由恋爱到婚姻的马拉松，所以你要坚持哦！万一哪天我就会嫁给你了…… ★小结 要想全面理解和掌握 JavaScript，关键在于弄清楚它的本质、历史和局限性。 ★Q&A ①元编程为何特性？ 传送门：怎么理解元编程？ 最高票答案： 广义理解：泛泛来说，只要是与编程相关的编程就算是 meta-programming 了 狭义理解：「编写能改变语言语法特性或者运行时特性的程序」。换言之，一种语言本来做不到的事情，通过你编程来修改它，使得它可以做到了，这就是元编程。 我觉得这个答案最简洁： 一般代码的操作对象是数据 元编程操作的对象是其他代码 至此，也就是说JavaScript具有这种不明觉厉的操作咯！难怪会有这句话： eval is evil 可为啥要说eval是个魔鬼？(⊙o⊙)…详情参考：JavaScript 为什么不推荐使用 eval？ babel算吗？按我的理解使用babel这个工具操作的对象也是代码，所以babel这个工具是元编程的实现？ 还有广义上说，使用了语法糖重构的代码？也算是元编程吗？如循环等操作 注意：可以不是操纵自身语言的编程的编程，比如Ruby以其元编程易用又强大，被许多人拿来写 DSL …… ps：还有一些诸如元数据、元认知等等的概念，总之我就照葫芦画瓢，加工数据的数据、加工认知的认知，有种种庄稼的味道，如丢个种子，施肥浇水，生根发芽。类似的丢个代码种子…… 扩展内容：元编程、如何有效地记忆各种“名词解释”？、元编程之javascript、Javascript元编程（一）、编程范式 ②狭义与广义？ 广义是指范围大，宽广。 狭义是指范围比较小，狭窄。 广义和狭义意思相对。所谓范围的宽窄是指概念的外延的大小。如： 「雷锋」狭义是雷锋本人 ，而广义则是所有为人民服务的人 「吃饭」狭义是吃米饭，而广义则是吃午、晚餐 …… 当然，这有具体和抽象的「味道」 总之对某些概念的理解，一般都会选择广义去理解 …… 传送门：为什么许多概念要分狭义和广义？、狭义，广义是什么意思、什么是广义,什么是狭义 "},"Ch01/1.1 JavaScript简史.html":{"url":"Ch01/1.1 JavaScript简史.html","title":"JavaScript简史","keywords":"","body":"1.1　JavaScript简史 ★出现原因 那时大多数网民的网速就只有28.8kib/s，然而网页的内容和复杂性（如简单的表单验证）却是在不断地增加。可想而知，就如政治课本常说的那句话一样： 我国社会的主要矛盾是人民日益增长的物质文化需要同落后的社会生产之间的矛盾 想要提高网速？——想都不要想 为此Netscape公司（大佬），决定着手开发一种客户端语言，用于处理简单的验证。总之就是在数据提交到服务器之前，希望有个程序可以过滤一下。 ★谁设计的JavaScript 来自当时就职于 Netscape 公司的布兰登·艾奇（Brendan Eich）。本来是叫LiveScript的，可为了炒热公司即将发布的Netscape Navigator 2（搭配了脚本语言的浏览器很高大尚），而当时恰巧Java红红火火，于是就改名为JavaScript了。这就是JavaScript的1.0版本…… ★JavaScript的发展势头 由于JavaScript1.0大热，为此趁热打铁， Netscape 随即在 Netscape Navigator 3 中又发布了 JavaScript 1.1 IE3.0添加JavaScript（具体一点指的是JScript）以后，标志着 JavaScript 作为一门语言，其开发向前迈进了一大步。毕竟微软正式进军了Web浏览器领域，而有了竞争对手，产品才会更强大…… ★Netscape VS 微软 微软：看不起我家IE浏览器是吧？还把自己公司定位为市场领袖型公司是吧？他奶奶的，你们不是发布了版本3的浏览器吗？这下我就对自家产品IE投入更多资源。不好意思，我要发布IE3了，而且我也要添加脚本语言，名字叫「JScript」。抱歉我家的「JScript」是基于你们家的 Netscape JavaScript 1.0 开发的，就是气死你，呵呵哒…… ★两个不同版本的JavaScript 一个是Netscape Navigator 中的 JavaScript 一个是Internet Explorer 中的 JScript 版本有了差异，那么写JavaScript的开发的开发人员，就得要学这个版本的语法了啊！一个页面要写两份，岂不是要GG了…… 其它编程语言，如C等都是有标准规定语法和特性的。况且Web势头发展是很猛的，日后说不定会有其它的浏览器产商，为此随着业界担心的日益加剧，JavaScript的标准化问题被提上了议事日程。 ★JavaScript1.1、ECMA、ISO/IEC 1997年，以JavaScript1.1为蓝本很荣幸地被建议提交到了ECMA，而基于JavaScript1.0实现的JScript就没有这个荣幸了。ECMA指定TC39（关注脚本语言发展的公司的程序员组成，如 Netscape、Sun、微软……）负责“标准化一种通用、跨平台、供应商中立的脚本语言的语法和语义”。TC39就像是编辑一样，而JavaScript1.1则是原稿，编辑经过数月的努力完成了 ECMA-262——定义一种名为 ECMAScript（发音为“ek-ma-script”）的新脚本语言的标准。 1998年，ISO/IEC也采用了 ECMAScript 作为标准（即 ISO/IEC-16262）。自此以后，浏览器开发商就开始致力于将 ECMAScript 作为各自 JavaScript 实现的基础，也在不同程度上取得了成功。 ★小结 JavaScript的简史： 种子阶段： 在Web日益流行的背景下，网页的大小和复杂性开始不断地增加，而网速依旧如此的慢，如做个表单验证也要考验用户的耐心——为此Netscape 公司打算开发一种客户端语言 发芽阶段： 布兰登·艾奇为Netscape Navigator 2 开发一种名为 JavaScript 的脚本语言，这是JavaScript1.0 成长阶段： Netscape在 Netscape Navigator 3 中发布了 JavaScript 1.1，而微软不灭威风，在IE3.0中发布了基于JavaScript1.0的JScript 由于不同版本并存的JavaScript会在日后导致很多问题，所以需要有标准规定 JavaScript 的语法和特性。为此1997年， JavaScript 1.1以蓝本的身份被提交到了ECMA，数月后TC39发布了ECMAScript-262——定义一种名为 ECMAScript的新脚本语言的标准。 1998年，ISO/IEC也采用了 ECMAScript 作为标准（即 ISO/IEC-16262）。从此，浏览器开发商就开始致力于将 ECMAScript 作为各自 JavaScript 实现的基础。 …… 我们通常都把JavaScript当作是在各浏览器运行的语言，如对于IE而言，我们说它的JavaScript，其实说的是IE对JavaScript（ECMAScript）的实现——JScript ★Q&A ①蓝本为何意？ 它的同义词是底本，到底蓝本是不是同原稿一个意思，根据这个：原稿跟草稿有什麼差??? 东东说到的「原稿纸专用的蓝色铅笔」，而这里说的蓝色铅笔在其答案中有提到： 蓝色铅笔：是因为在印制成书时，这种蓝色铅笔画上去是不会被印出来的，所以有些漫画家就用这个来画在原稿上。 同样有个蓝字，那么蓝本和原稿就是一个意思咯！ 那么这样的话：「这部电视剧以同名小说为蓝本改编而成 」？我在想为啥出版的书会有错别字？是原稿的锅，还是校稿的锅？或者说都有责任…… ==总之，你的简历最好不要有错别字== ②Ecma、TC39、ISO/IEC？ 都是制定标准的，那么制定标准的意义何在呢？——你要知道一个东西是好的还是不好的是相对而言的，就如面试要求说「你这个技能是了解？熟练？还是精通？」一样，没有一个共有的标准的话 ，那么沟通起来就GG了……如前后端撕逼大战，互相丢锅…… ③邯郸学步？ 释义： 比喻一味模仿别人,非但没有学到别人的长处,反倒失去了自身的特色。也作学步邯郸。 不要只是模仿结果，因为这只是量的堆积而已，你得要去发现这样做的逻辑所在，然后加以运用到自己未知的事物身上，总之有种「元」的味道，或者说是触类旁通…… ④「脚本」是什么东东？ 在演员眼中，就是看脚本说台词；在程序员眼中，就是一系列指令 ，不过这些指令是给计算机看，然后解释执行的，特点是短小精悍、自动化（程序都有这样的标签） ⑤Netscape Navigator 「1/2/3」 是什么鬼？ 这是版本号啊！而且是这样的： 版本号没有统一的标准，完全由开发者自己决定。但比较常见的是X.Y.Z的版本标示，X更新的话就表示有重大更新，如界面重大更新等，或者不兼容老版本；Y更新表示添加了新的功能；Z表示修订错误和bug。 也有的软件用发布的年月做表示，比如Ubuntu就是如此。 摘录自：软件升级时，版本号是怎么定的？ - Xizhi Zhu的回答 - 知乎 我看了一下自己的npm和node版本： npm：3.10.9 node：v6.9.2 node多了个v也许是更明确这是版本之意，目前npm的稳定版本是6.2.0 ，而node当前最新版本为10.7.0 关于node的版本有两个可选的下载：一个是LTS（全称是Long Term Support，长期支持版），一个是Current。前者是推荐广大用户使用的，它们二者这个的区别呢？ LTS版本支持之前的一些老版本特性，可以让你丝滑升级！ 即可靠，稳定 ，可以线上使用。 Current版本指新版本不是beta版本 ，由于是新的，可能会有不可预料的bug…… 参考：Node.js 的 LTS 版本意味着什么？ 这是不是意味着，我可以升级本地的node，我之前一直在想要把node给升级了，可是那些与它依赖在一起的工具会不会受到影响？ 试一下？ 升级npm： npm -g install npm@5.6.0 而node呢？听说windows系统下只有覆盖安装了，而且是在原安装目录安装覆盖…… 于node官网上下载，安装后，检查当前node的版本为v8.11.3，而npm则是5.6.0 目前还未测试过，不知道gitbook等工具会不会受到影响，照理说，应该不会的…… ps：由于Ruby 靠 z 的奇偶来区分 stable 和 test ，所以node的版本是不是也是如此，就不得而知了。npm更新后，我就不用在安装依赖的时候添加 -S等参数了…… ⑥目前各大浏览器的对ECMAScript的兼容性情况？ 传送门：ECMAScript、Kangax’ ES7 兼容性表 ⑦话说，Chrome的JavaScript叫什么名字？ IE的JavaScript本名叫JScript，那么Chrome的JavaScript呢？——我找不到答案，不过即便找到了，也会显得很无聊，因为名字只是一个代号而已，何不执着呢？你只需要知道有这么一门语言（JavaScript）在浏览器运行就好了 ★参考链接 蓝本 、蓝本是什么意思啊？、如何理解Flask中的蓝本？ 书籍出版前都是如何校对的？一个字一个字的看吗？ 编辑/校對工作主要是做什麼的？入行門檻高嗎？ 为什么正版图书里也会出现错别字呢？ 如何出版一本书？ 你以为编辑看稿子就是看错别字和病句吗？大错特错！ 投稿有错别字，编辑看到了会不会直接OUT掉啊？ Ecma国际、ECMAScript [译] TC39，ECMAScript 和 JavaScript 的未来（Part 1）、★控制ECMAScript版本发布的TC39流程 ISO、IEC、GB、ISO、IEC、IEEE标准有什么区别？、 ★ISO、IEC、ITU——国际三大标准化组织 人们为什么要制定标准或是规范，“标准”都有什么作用，请举例说明，场景尽量宽泛些？ 面试词典：什么叫精通？什么叫熟悉？什么叫了解？ 邯郸学步、邯郸学步的故事、邯郸学步 如何用通俗易懂的语言解释脚本（script）是什么？ 软件的版本号有时候会类似 1.0.1 / 3.5.3，这些都是怎么决定的？ "},"Ch01/1.2 JavaScript实现.html":{"url":"Ch01/1.2 JavaScript实现.html","title":"JavaScript实现","keywords":"","body":"JavaScript实现 ★JavaScriptECMAScript？ 这是广义的看法，其实JavaScript的含义要比ECMAScript中规定的要多得多，比如说一个完整的JavaScript实现应该有3个不同的部分组成： 核心（ECMAScript） 文档对象模型 （DOM） 浏览器对象模型（BOM） 难道当初提交的JavaScript1.1没有DOM和BOM的影子？ ★ECMAScript ◇如何理解下面这句话？ 由 ECMA-262 定义的 ECMAScript 与 Web浏览器没有依赖关系。实际上，这门语言本身并不包含输 入和输出定义。 我在想——？：为什么没有包含「输入和输出（IO）」的定义？IO难道不是一门语言不可或缺的一部分吗？ 由于之前学过JAVA，而我对IO的理解——操作文件系统。目前，我只知道Node是有IO操作的，也就是说在浏览器跑的JavaScript是不支持IO操作的？ 我只能谷歌了——➹：ECMAScript并不包含输入和输出的定义，该如何理解？ 其中有答案说到： 「输入」和「输出」属于交互的内容 ，而交互是由额外的内容提供的，对于浏览器就dom、bom；对于Node、Flash就是其他的一些东西 还有一个答案可以补充上面这个： ECMA只是js的语法核心，不涉及到与浏览器交互或是和系统交互的部分。 加上了DOM和BOM，就变成了浏览器端的js 加上了系统操作相关的api就变成了nodejs 操作系统与编程语言？——➹：编程语言和操作系统是什么关系？ 总之，一言以蔽之： ECMA-262 定义的只是这门语言的基础，而在此基础之上可以构建更完善的脚本语言 ◇宿主环境 有哪些宿主环境呢？——Web浏览器、Node、Adobe Flash。就只有这3个？ 看了轮子哥关于「编程语言和操作系统是什么关系？」这个问题的回答： 语言和系统都是运行在CPU上的，不是语言运行在系统里。系统应该被看成类库和框架 我在想，如果我不把windows系统看作是各类应用程序的宿主环境的话，那么映射到Web浏览器，我可以把Web浏览器看作成类库和框架…… 关于宿主环境的义务，✎： 不仅提供基本的ECMAScript 实现，同时也会提供该语言的扩展（如DOM），以便语言与环境之间对接交互 ◇ECMA-262 标准规定了什么内容？ 大致说来，它规定了这门语言的下列组成部分，✎： 语法 类型 语句 关键字 保留字 操作符 对象 所以，ECMA-262到底是什么呢？——ECMAScript是对语言的描述，那么这语言是什么呢？——实现ECMA-262标准规定的各个方面内容的语言。✎：JavaScript实现了ECMAScript…… ps： ECMA-262 标准没有参照 Web 浏览器，即不会看Web浏览器脸色而制定标准，总之一视同仁…… ◇ECMAScrpit的版本 第x版表示：描述特定实现的 ECMA-262 规范的第 x个版本 ✎：ES5就是ECMA-262规范的第5个版本 ES1 本质上与 Netscape的 JavaScript 1.1 相同，但还是有些小改动，✎： 删除了所有针对浏览器的代码（一视同仁，不能对己方有利） ECMA-262 要求支持 Unicode 标准（从而支持多语言开发），不然其它国家的开发者岂不是GG了 对象变成了平台无关（Netscape JavaScript 1.1 的对象在不同平台中的实现不一样，例如 Date 对象），总之，就是时间属性可以在不同的系统中表示相同的时刻，而如果使用了本地时间对象，则反映当地的时间。 ES2 主要是编辑加工的结果。没有作任何新增、修改或删节处理。所以一般不使用第 2 版来衡量 ECMAScript 实现的兼容性 ES3 第一次真正的修改，✎：修改了字符串处理等……新增了对正则表达式……等的支持 标志着 JavaScript 成为了一门真正的编程语言。 ES4 进行了一次全面的检核修订，因为 JavaScript在 Web上日益流行，需求越来越大，ES3的规范还不够 出台后的ES4标准几乎在第 3 版基础上完全定义了一门新语言，这跨度很大，可JavaScript 引擎跟不上啊！所以只好在ECMA-262 第 4 版在正式发布前被放弃 ES5 ECMAScript 3.1 （之前ES4的替代性建议）成为 ECMA-262 第 5 版，并于 2009 年 12 月 3 日正式发布 较少的改进，✎： 第 5 版力求澄清第 3版中已知的歧义 增添新的功能，如原生JSON对象（这个可以作深拷贝啊！而且由于对象是在内存生活的，所以有了它就可以保存对象到硬盘里了，即所谓的序列化，这其中用到了诸如JSON.stringify()、JSON.parse()等方法）、继承的方法、高级属性定义、一种严格模式、对 JavaScript 引擎解释和执行代码进行了补充说明 ➹：ECMAScript5.1中文版 ◇什么是ECMAScript兼容 各大浏览器厂商的JavaScript要想成为 ECMAScript 的实现，就必须做到以下几点： 支持 ECMA-262 描述的所有“类型、值、对象、属性、函数以及程序句法和语义” 支持 Unicode 字符标准 当然，除了兼容这些的义务以外，还给了你一些权力，即所谓的扩展，✎： 添加 ECMA-262 没有描述的“更多类型、值、对象、属性和函数”。ECMA-262 所说的这些新增特性，主要是指该标准中没有规定的新对象和对象的新属性 支持 ECMA-262 没有定义的“程序和正则表达式语法”。（也就是说，可以修改和扩展内置的正则表达式语法。） 总之，这些权力为兼容实现的开发人员基于 ECMAScript 开发一门新语言提供了广阔的空间和极大的灵活性，不然，那么多条条框框，你说什么就是什么，会让 ECMAScript 很不受开发人员欢迎的 ◇Web 浏览器对 ECMAScript 的支持 JScript 3.0 （IE4）与 JavaScript 1.2（NN4） 都没有兼容ES1，因为当时的 ECMA-262 尚未定稿 JavaScript 1.3（NN4.06），与ES1完全兼容（如支持Unicode字符标准、实现了所有对象的平台中立化），并保留JavaScript1.2新增的特性 JavaScript1.4并没有随同 Netscape Navigator 5一道发布。后来，JavaScript 1.4只发布了针对 Netscape Enterprise Server的服务器版，而没有内置于 Web 浏览器中 2008年，五大主流 Web 浏览器（IE、Firefox、Safari、Chrome 和 Opera）全部做到了与 ECMA-262兼容。 IE8 是第一个着手实现 ECMA-262 第 5 版的浏览器，并在 IE9 中提供了完整的支持。（没想到是我IE8第一个去吃螃蟹吧！虽然现在Chrome的兼容性最好，当是那个时候，我IE也是很强的！） 总之，IE9+、Firefox4.0+，完全兼容ES5 目前兼容情况，✎： ★小结 ECMA-262 定义的只是JavaScript这门语言的基础，而在此基础之上可以构建更完善的脚本语言 JavaScript的运行环境需要有Web浏览器这个宿主环境和嵌入这个宿主环境的JavaScript引擎（如V8） 只兼容了ESx的JavaScript显然不强大，只有把DOM和BOM都实现了，JavaScript才是完整的JavaScript，才能让 Web 开发变得多样化…… Web开发需求是不断增长的，那么ES等规范，也要跟随潮流，不断升级…… 关于兼容，各浏览器的JavaScript必须得基于ES规范实现，这是基本的义务，当然，也有权利给你们进一步扩展，如DOM、BOM……这也就是为什么同一个页面在不同浏览器上打开可能会存在效果不一致的原因 日常你写的页面，该用哪个浏览器做测试？显然是Chrome啊！因为它对ESx的兼容性走在最前沿，可以使用一些很新的特性，况且V8引擎大佬还没有说话呢？而且还有这样一些的言语「chrome操作系统实际上就一个chrome浏览器 」 仅仅是1~3页，但给我的认识是很多的……比如我在想一本好书的标准是什么？知识点的讲解的拿捏程度、内容组织、逻辑、结构等相较于其它书籍更好？ 总之一本好书，会让你对某个知识点的理解更好，给你带你的启发更大，当然这是相较于同一话题的书…… ★Q&A ①DOM和BOM有标准吗？ DOM有，而BOM没有 W3C对DOM进行标准化的动作，目前已经推行至第四代。 BOM既没有标准的实现，也没有严格的定义, 所以浏览器厂商可以自由地实现BOM。 扩展阅读：JavaScript的组成—ECMAScript、BOM和DOM、DOM 前世今生、浏览器对象模型、梳理下浏览器对象模型知识（BOM）、BOM是什么？ ②什么是语法？ 传送门：语法 只能简单理解了…… 语言学中语法（英语：Grammar）是指任意自然语言中控制子句、词组以及单词等结构的规则 语法是规则，你不按套路来讲话，人家是听不懂的。✎：「饭吃我」 由于ECMAScript是JavaScript的核心语法（规则），那么这就意味着还有一些除了ECMAScript以外浏览器自有的一些规则咯？ ➹：什么是语法？、世界上语法最严谨的自然语言是什么？、汉语究竟有没有语法？ ps：可以去看看关于翻译的书籍，✎：英汉翻译教程（第2版） ，为什么看这本？我是看了这篇文章——干货 | 如何翻译长句子 ③宿主环境？ ➹：★【javascript基础】之【宿主环境】、Js 的多宿主时代、宿主环境、首先，正确地理解什么是Javascript 我稍微看了一下，摘录了一些内容： JavaScript只能够寄生在某个具体的环境中才能够工作 ，即它不能像C那样开发系统，制造环境 JavaScript运行环境一般都由宿主环境（由外壳程序「✎：Web浏览器……」生成 ）和执行期环境（由嵌入到外壳程序中的JavaScript引擎生成）共同构成。 一个宿主环境中往往可能运行很多种脚本语言 脚本语言与独立的语言是有区分的，JavaScript是一种脚本语言，它本身不提供IO（输入和输出）接口 ……所以其宿主环境会提供宿主对象，来让JavaScript具有更多的行为，如DOM和BOM各自提供的document和 window 外壳程序不仅仅是Web浏览器，只要能够提供JavaScript引擎执行的环境都可以算做外壳程序 ，如Node…… 外壳程序还可以通过符合标准的扩展接口接纳更多的插件、组件（DOM组件……）或ActiveX控件等.DLL扩展应用。 突然觉得，window对象和document对象完成了与Web浏览的交互，还有关于对下面这句话的理解，有了新的认识 Node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript 运行环境。 ，✎： Node.js=Node（类似于Web浏览器）+JavaScript引擎（V8） ps：我在这个页面的控制台敲下alert(1)竟然不起效果啊！我看了它的源码： ƒ (n){try{console.log(\"alert: \"+n)}catch(t){}return!0} 搞不懂为啥要这样做！覆盖原生提供的alert函数真得好吗？ ③时间戳 ➹：时间戳 - 维基百科，自由的百科全书 时间戳（英语：Timestamp）是指字符串或编码信息用于辨识记录下来的时间日期。 啥意思？真看不懂…… ➹：谁能用简单明了的语言解释一下什么是“时间戳”？ - 知乎、 为什么手机时间只能显示 1901 到 2038 年？ - 知乎、程序员的日常：时间戳和时区的故事| 编程派 | Coding Python 总之，就这样好了，✎： 不要被「戳」吓到了，就是一个表示当前时间的数字 。而在计算机中，「时间戳」一般是指 Unix 时间戳，即自从 Unix 纪元（格林威治时间 1970 年 1 月 1 日 00:00:00）到当前时间的秒数。 注意，✎： 时间戳并不取决于时区，即你在东8区，他在东10区，那么它们的时间戳是不一样的吗？是一样的 同样的时间戳，相对于不同时区，其时间是不一样的，如这个xxxxxx……时间戳，那么本地时间是什么，就是什么 目前的时间戳规范不会一直持续使用下去 ，因为到2038年1月19日时，Unix时间戳就会因为32位内存溢出（32-bit overflow）而无法继续使用。 格林尼治平时（英语：Greenwich Mean Time，GMT） ➹：UTC和GMT什么关系？ - 知乎 ④网景和火狐有啥关系？ ➹：当年的 Netscape 和今天的 Mozilla/Firefox 之间是什么关系？有什么故事？ - 知乎、为什么网景（Netscape）被 IE 打败了，而 Firefox、Chrome 却生存了下来？ - 知乎 "},"Ch01/1.2.2 DOM.html":{"url":"Ch01/1.2.2 DOM.html","title":"DOM","keywords":"","body":"文档对象模型（DOM） ★现有的认识 DOM的数据结构是一颗树？ DOM是html和JavaScript沟通（交互）的桥梁？ JavaScript CRUD 了DOM元素，而html文档就会动态刷新，就如vue一样，data改变，自动render？ ★DOM是什么？ DOM的出现是为了针对XML，在浏览器眼中，DOM就是基于XML而扩展用于HTML 的应用程序编 程接口（API） DOM做了什么？ 把整个页面映射为一个多层节点结构，为此可以说，页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据 （书中说到有XML页面这种生物，我广义理解的页面是HTML页面！） 更好地理解页面？（目前你是浏览器） 按照DOM的要求来，把一个HTML文档变成一棵树，然后可以让开发者（如使用JavaScript的）借助DOM提供的API可以轻松自由地CRUD任何节点！ ps：其实DOM提供的API（我可以说浏览器提供DOM的API吗？或许还有其它东西实现DOM，然后提供的API会比浏览器提供的要好用）并不好用！你可以使用jQuery，不过，还是Vue好使一点！ ◇为什么要使用DOM？ DHTML 在IE4 和 NN4的那个年代，这个技术的出现可以让开发人员无需重新加载网页，就可以修改其外观和内容。（这难道是个类似vscode插件—Go Live「保存对页面的更改，就可以自动刷新页面了」的东西？还是说是个类似AJAX的东西？还是……） 总之，那个年代，DHTML 给 Web技术发展带来巨大进步，不过由于IE4和NN4在开发 DHTML 方面，互相看对方不顺眼，所以过去那个只编写一个 HTML 页面就能够在任何浏览器中运行的时代结束了。 在开发人员看来，Web跨平台是天性使然，如果也要想操作系统那样，那就必须得要额外多做一些工作才行啊！同一个页面，在不同浏览器里浏览，是不同的效果，显然这是猴子偷桃的行为！ 就这样，此时，负责制定 Web 通信标准的 W3C开始着手规划 DOM。 DOM级别 DOM1 级（DOM Level 1）于 1998 年 10 月成为 W3C 的推荐标准。DOM1 级由两个模块组成：DOM 核心（DOM Core）和 DOM HTML。其目标主要是映射文档的结构。 相较于DOM1级，DOM2 级的目标宽泛许多，如，引入了下列新模块，✎： DOM 视图（DOM Views）：定义了跟踪不同文档（例如，应用 CSS 之前和之后的文档）视图的 接口； DOM 事件（DOM Events）：定义了事件和事件处理的接口； DOM 样式（DOM Style）：定义了基于 CSS 为元素应用样式的接口； DOM 遍历和范围（DOM Traversal and Range）：定义了遍历和操作文档树的接口 还有一点，DOM1 级中的 DOM 核心模块也经过扩展开始支持 XML 命名空间 DOM3 级则进一步扩展了 DOM 引入了以统一方式加载和保存文档的方法（什么鬼？） 新增了验证文档的方法（什么鬼？？） 对 DOM 核心进行了扩展，开始支持 XML 1.0 规范，涉及 XML Infoset、XPath和 XML Base。 一些提示，✎： 不是只有你家JavaScript才有DOM DOM 并不只是针对 JavaScript 的，很多别的语言也都实现了 DOM。不过，在 Web 浏览器中，基于 ECMAScript 实现的 DOM 的确已经成为 JavaScript 这门语言的一个重要组成部分。 DOM0级？ 在阅读 DOM 标准的时候，读者可能会看到 DOM0 级（DOM Level 0）的字眼。实际上，DOM0 级标准是不存在的；所谓 DOM0 级只是 DOM 历史坐标中的一个参照点而已。具体说来，DOM0 级指的是 Internet Explorer 4.0 和 Netscape Navigator 4.0最初支持的 DHTML。 这个DOM0级比DOM1级要厉害得多啊！因为DOM2级在DOM1级的基础上扩充了DHTML一直都支持的一些模块。 其它DOM 标准 基于XML的语言，只针对自身语言的 DOM 标准，✎： SVG（Scalable Vector Graphic，可伸缩矢量图）1.0； MathML（Mathematical Markup Language，数学标记语言）1.0； SMIL（Synchronized Multimedia Integration Language，同步多媒体集成语言）。 这几种语言的DOM标准都有 W3C 的推荐标准……反例有Mozilla 的 XUL（XML User Interface Language，XML 用户界面语言）就有自己的 DOM 实现…… Web 浏览器对 DOM 的支持 在 DOM 标准出现了一段时间之后，Web 浏览器才开始实现它 我是否可以说标准出现了，并不意味Web浏览器可以同步实时更新……这就是为什么会有兼容ES几有百分之几十的字眼…… IE5，首次尝试实现 DOM，但直到 IE5.5 才算是真正支持 DOM1 级。在随后的 IE6 和 IE7 中，微软都没有引入新的 DOM 功能，而到了 IE8 才对以前 DOM 实现中的 bug 进行了修复（也就是说IE8之前（包含IE8）对DOM1的实现只是几乎全部咯！） Netscape 6（Mozilla 0.6.0）才开始支持 DOM。在 Netscape 7之后，Mozilla把开发重心转向了 Firefox浏览器。所以，✎： Firefox 3完全支持 DOM1级，几乎完全支持 DOM2级，甚至还支持 DOM3级的一部分 （可见，标准都出了好几个版本了，浏览器连就标准都还没有实现全，所以说，标准和浏览器的实现是两回事，我的标准可以更新很快！不需要看你浏览器行事！） 一些小知识，✎： Mozilla开发团队的目标是构建与标准 100%兼容的浏览器 浏览器开发商的目标，✎： 那时，支持 DOM已经成为浏览器开发商的首要目标。不过，目前我想它们应该是支持HTML5为首要目标吧！ 关于目前主流浏览器对 DOM 标准的支持情况，即所谓的DOM兼容性，✎： ➹：目前各大浏览器对DOM的支持到什么程度了？ - 知乎 看了一些，听说，四大浏览器厂商一起反对 DOM 4.1 ，又说到W3C 历史上有过故意和厂商搞不兼容 ！ 反正，IE9+搞定了1、2、3级； 总之就用chrome好了，下载个最新版的安装就好了！ ★小结 没有想过，广义论及HTML5时，实际指的是包括HTML、CSS和JavaScript在内的一套技术组合。 这意味着学前端和学HTML5似乎没有区别 看了这个笔记——深入浅出DOM基础——《DOM探索之基础详解篇》学习笔记 · Issue #9 · jawil/blog，我就知道有些知识的学习是需要迭代的，只能一步步加深了，不然效率不好！ 「标准」二字看起来就像是在说「画个大饼给你吃！」 DOM的实现，让网页更有滋味了啊！网页的交互形式弄得好不好，关键在于你对DOM的API使用得6不6！还有就是，CSS真得是很折磨人！ ★Q&A ①什么叫API？ 按照我目前的理解就是别人提供给你用的东西…… ➹：设计新人必备：5分钟理解什么是API！ – Dianrong Design Center、★应用程序接口 - 维基百科，自由的百科全书、★用大白话给你科普，到底什么是 API（应用程序编程接口）？_36氪 ②DHTML？HTML？这二者有区别？ ➹：以前的 DHTML 如今是不是也算前端？ - 知乎 摘录其中的一个答案，✎： DHTML 是 dynamic html 的缩写 ，这个技术在那时基本上是由微软提供的一种前端技术 。DHTML 中大多是当年 IE 所拥有的 DOM API ，可以使用VBS 或 JS 调用，在 IE 中处理 HTML 和 CSS。 当标准化运动席卷之后，随着浏览器竞争日趋激烈，它随着非标准化 IE （老IE）逐步退出历史舞台而很少被人提及。 按现在来说，它基本等同于浏览器端的前端开发岗位所掌握技能。可以说是前端开发的前身。前端岗位，也可以说是从它中脱胎而来。 但是就当时来说，前端岗位（职业）还没有出现，使用 DHTML 的大部分是当时称谓的“程序员”，现在称谓的“后端” 这个词儿在平时基本上是绝迹的，新人很多并不知道它。 还有一些，✎： HTML5在技术上包含了原来DHTML的所有内容 还有这个答案很关键，✎： DHTML 曾被认为是 HTML/XHTML 、CSS 和 JavaScript 相结合的产物，就像今天的 HTML5 那样，但把这些东西真正凝聚在一起的是 DOM 。如果真的需要来描述这一过程的话，“DOM 脚本程序设计”更精确，它表示使用 W3C DOM 来处理文档和样式表。 DHTML 只适用于 Web 文档，“DOM 脚本程序设计” 则涵盖了使用任何一种支持 DOM API 的程序设计语言去处理任何一种标记文档的情况。 ——《JavaScript DOM编程艺术》 我也纳闷为啥书上说，由于 Netscape 和微软在开发 DHTML 方面各持己见，才有了W3C开始着手规划DOM 总之，我就认为DHTML≈HTML+CSS+JavaScript吧！然后，其中DOM的出现，让那时所谓的JavaScript开始可以跟HTML和CSS打交道！这样就不会显得孤立无援了…… 至于DHTML和目前HTML5的关系，我想HTML5是DHTML的超集吧！即DHTML有的，我HTML5都有，我HTML5有的新特性，你DHTML就没有了！（在这里我把DHTML看作是旧技术或者说是没有升级的一套技术组合，用于区分Web技术时代） ➹：Web 1.0、2.0、3.0 分别是什么意思？ - 知乎 ps：似乎这里DHTML的D有种网页特效的味道！即网页是有动态变化的！ ③DOM是什么？ ➹：★XML DOM解析 基础概念 - 圣骑士wind - 博客园 我摘录了一些我认为重要的话（有稍微的改动），✎： W3C制定了一套书写XML分析器的标准接口规范——DOM。 通过DOM接口，应用程序（如JavaScript）可以在任何时候访问XML文档中的任何一部分数据，因此，这种利用DOM接口的机制也被称作随机访问机制（为Web开发带来了很大的灵活性）。 DOM分析器把整个XML文档转化成DOM树放在了内存中，因此，当文档比较大或结构比较复杂时，对内存的需求就比较高。 文档代表的是数据，而DOM则代表了如何去处理这些数据。 ✎：对于Web应用开发来说 ，DOM就是一个对象化的HTML数据接口，一个与语言无关、与平台无关的标准接口规范。 文档（根节点）和根元素节点是两回事 根节点代表整个文档，是我们解析XML文档的入口，通过它获取到Document对象； 根元素节点代表XML文档的根元素，必须要在获得Document对象之后才能一层一层地去访问它的元素。 在DOM接口规范中，有四个基本的接口：Document, Node, NodeList, NamedNodeMap。 元素节点还是可以有属性的唯一类型的节点 文档（根节点） ：文档节点是整个文档中所有其他节点的父节点。（根节点不等于根元素节点） ➹：★DOM 是什么？ - 知乎 触不及防的理解，✎： 站高一个维度去理解问题 （如DOM是什么）！ ✎：站在浏览器的角度来思考 ——解析文档，建模成对象模型，开放API接口 ps：在使用MVC阻止JavaScript demo的时候，站在一个文件里，即一个模块里看的话，就这样简单定义3个对象就好了，可如果站出来，从多个文件的角度去看的话，会有很多重复demo！为此会有了叫面向对象的编程思想，即把共有的demo抽象成一个类，然后对象就按照这个类（模板）刷（new）出来…… 普通文档（*.txt）和HTML/XML文档（*.html/*.xml）的区别仅仅是因为后者是有组织的结构化文件 父亲的父亲以及上溯十八代祖宗叫做祖先节点。儿子的儿子以及子子孙孙无穷匮也叫做后代节点。 ④什么是接口规范？ 我在学Java的时候，就遇到过一个叫面向接口编程的思想，接口是100%抽象的！它没有具体的实现，只有抽象的功能罗列……这是我对Java接口的认识，可什么是接口规范呢？或者说是接口标准？ ➹：什么是接口文档，如何写接口，有什么规范？ - 知乎 这个有格式，好看一些，✎： ➹：接口规范，什么是接口规范？ 可有，✎： 接口文档？——前后端共同定义的接口文档，用于解决前后端甩锅、撕逼等问题 前后端需要根据这个接口文档进行开发，到项目结束前都要一直维护 为什么要有接口文档？——为了沟通交流开发！为了项目维护或者该项目有人离职了，招了你，需要你来背锅！为此得要有个开发文档！（开发文档和接口文档有区别？） 接口规范有啥？——有四部分：方法、uri、请求参数、返回参数 ，总之就是与后端交互的一种书面语吧！诸如有这样的一些字眼——你必须得这样来，不然我就不干了！不然我就甩锅给你了！ ps：关于接口，之前有用过leancloud——它把后台封装了，提供了一些接口（是否可以理解为一些API？），让我们可以使用JavaScript实现对数据库 CRUD等操作！ ⑤DOM视图是什么鬼？ ➹：编辑 DOM | Tools for Web Developers | Google Developers 看了第一句，✎： Chrome DevTools 的 Elements 面板中的 DOM 树视图可以显示当前网页的 DOM 结构。通过 DOM 更新实时修改页面的内容和结构。 难怪使用了JavaScript操作DOM后，不用刷新页面，网页内容和结构就会发生变化。 我们的html文件需要经过浏览器解析渲染后，才能以网页的形式浏览的！在这里的DOM树视图就是你用 E12打开开发者工具→☞ Elements下看到的东西！ ⑥DOM3级和事件不得不说的故事？ ➹：[JavaScript] DOM3级与事件一 – 技术学习小组 ⑦文档对象模型、DOM事件模型，这里的「模型」二字指的是什么？ ➹：模型 - 维基百科，自由的百科全书 「模型」给我的第一感觉就是「这个东西必须按这样来」！ 模型化有一种「抽象简化」的味道 记得看过某个视频，其中说到，把现实问题转化成数学问题，然后再转化成编程问题！ ➹：编程和数学建模的区别是什么？ | 问答 | 问答 | 果壳网 科技有意思 看似很有道理的答案，似乎总有不妥之处！有时候一个问题的描述，比解决一个问题更难！ 如果只看「建模」二字的话，百度百科的解释这样的，✎： 建模就是建立模型，就是为了理解事物而对事物做出的一种抽象，是对事物的一种无歧义的书面描述。 JavaScript想要操作html文档，可是没有途径。那好吧！你JavaScript无法操作html文档是吧？那身为大哥的我浏览器只好勉为其难的帮你把html文档抽象成你能操作的样子了，即对html文档建模。身为大哥的我浏览器具体做法就是，✎： 解析html文档，建模成对象模型，开放API接口。 身为小弟的你 JavaScript，使用这些开放的API接口就可以了，我捣鼓出来的DOM，其接口规范中有四个基本的接口：Document, Node, NodeList, NamedNodeMap。 你看着办咯！ ps：DOM 只是一个接口规范，可以用各种语言实现 ！就像是Java的接口概念一样（感觉像是一个意思！100%的抽象，功能的罗列），所以你JavaScript 对 W3C制定的DOM 标准实现 的那些所谓的「DOM API」只能适用于你JavaScript这门语言！ ➹： ★DOM 模型概述 -- JavaScript 标准参考教程（alpha） 话说，什么叫书面描述？——找不到答案 拆解，书面语为何意？✎： 书面语，是指用文字记载下来供“看”的语言，它在口语的基础上形成，使听说的语言符号系统变为“看”的语言符号系统。书面语是在口语的基础上产生的，是口语的加工形式，所以两者基本上是一致的。 由于书面语是人们在文本上交流所使用的语言，相对于口语，有其内在的稳定性。这体现在空间与时间两个跨度上。 如，书面语：一元五角；口语：一块五 总之书面语，有种稳定特质，那么关联到「建模是对事物的一种无歧义的书面描述」这句话，无歧义和书面描述有念重叠的「味道」，那么我直接就认为建模是对事物的一比一的抽象？可是抽象不是意味这简化吗？还如何无歧义？这里的无歧义指的是什么呢？ 果壳的那个答案说到，关于数学建模，✎： 再精细的模型，只可能一步一步逼近这个现实，但它永远不可能等于现实。 所以检验一个模型的精度是否达到我们可以接受的范围，是否是现阶段我们能合理使用的，最可靠的方法就是输入足够多的参数去检验得到的结果与现实情况差别有多大。 此刻，我已经不知道我的问题到底是什么了。 摘录几个果壳的答案，✎： 霍达敢达，✎： 数学建模是对实际问题的数学解释化，即将实际问题转换成能用数学解决的问题 。 有时候你建立一个很好的模型，很多时候你需要用编程来实现，拟合，仿真，计算，这是编程需要做的事情。 孤狐无悔，✎： 我认为本质上， “建模”是我们理解问题和分析问题的一个工具，通过这一工具，我们将实际问题简化，使其“可计算”。 “编程”是一个纯粹的计算工具，这一工具不会帮助我们我们理解和分析问题，只是用来“计算”。 特别需要强调的是，“编程”适合用来处理“重复性”的计算，附带也可以做一些其他重复性的工作（例如输入、输出、排版之类）。 老实说，这第二点有毒啊！数据结构和算法分析，不是编程的一部分吗？ 然后又有了进一步的补充，✎： 说到编程，现在比较流行的理论，将其分为5部分。 需求分析，程序设计，编写代码，测试发布，技术支持。 其中“程序设计”部分，就是“提出一个解决方案”，建模一般都是包括在这里面的，画流程图也是这里面。 而“编写代码”，则是实现这一解决方案。 你所说的“大量理论与技巧性的工作”，其实大部分都是属于“程序设计”那一部分的，编写代码只要掌握一定的技巧，其实是相当简单的事情。——这就是为什么越高级的程序员，所需要写的代码越少——代码都可以交给低级程序员来写，高级程序员只需要负责设计就可以 程序设计“的时候需要用到的知识很多，尤其是需要很多数学方面的知识。等到开始写代码的时候，需要的东西就少多了。 另外相信我，编程中，”需求分析“这部分才是最难的。 之前，看王垠的博客，其中有讲到过，数学对编程并不重要！我不知道他说的编程指的是什么，如果我根据孤狐无悔的阐述的话，我认为王垠所认为的编程是与建模区分的！这才让数学显得不重要！ 愈发觉得，如何把零碎的知识点关联起来，是件极其让人头疼的事儿！比如说，有些内容曾经自认为理解过，然而大部分这些内容只会对当时理解的上下文有用，换了一个上下文，就很难有代入感了。 总之，对学过的知识，就得要不断回顾，不断更新对它已有的理解！比如说，在这里我又重新了认识了编程，之前我的编程的理解就是「输入、计算、输出，然后如此循环，即所谓的编写代码，毕竟脑海中只有定义变量的数据结构，然后为想要的结果开一条路出来，仅此而已。总之就是一个点」，而现在的认识则是所谓的「软件工程」 ⑧编程和数学建模的区别是什么？ 先试着相信一个答案，✎： 这俩区别还是挺大的。 编程需要建立在建模基础上进行。 简而言之，就是假设我们需要让计算机帮助我们做一件比较复杂的事，建模的过程就是我们自己想明白该怎么办，而编程则是在自己想清楚的基础上，通过语言告诉计算机应该怎么算。 建模：伪码，自己看，自己的语言 编程：规范自己的语言，即像编程语言转化，让计算机能看懂，还得要告诉计算机怎么算，最后算出结果 有人问，✎： 编程要用到算法，数据结构，这个过程也包括建模吧？ 有人回答，✎： 两个完全不是一个层面东西. 数据结构和算法主要针对计算机运行时候的优化和资源分配. 建模的对象是你要研究的东西. 总之，在你编程的时候，要想清楚搞什么，怎么搞，然后再让计算机帮你搞事情，前提是计算机是能搞定的！ "}}